<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <%- include('./partials/head'); %>
    <style>
        :root {
            --primary: #000000;
            --secondary: #000000;
            --success: #000000;
            --warning: #3b3b3b;
            --info: #353535;
            --light: #f8f9fa;
            --dark: #212529;
            --gray: #6c757d;
            --light-gray: #e9ecef;
        }
        
        body {
            background-color: #f5f7fb;
            color: #333;
            min-height: 100vh;
            font-family: 'Segoe UI', system-ui, sans-serif;
        }
        
        .main-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 1.5rem;
        }
        
        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid #e2e8f0;
        }
        
        .section-title {
            font-size: 1.75rem;
            font-weight: 600;
            color: #2d3748;
        }
        
        .user-info {
            font-size: 0.9rem;
            color: #6c757d;
        }
        
        .card {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
            overflow: hidden;
            margin-bottom: 1.5rem;
            border: 1px solid #e2e8f0;
        }
        
        .card-header {
            padding: 1rem 1.5rem;
            border-bottom: 1px solid #e2e8f0;
            background-color: #f8f9fa;
        }
        
        .card-title {
            font-size: 1.1rem;
            font-weight: 600;
            color: #2d3748;
            margin: 0;
        }
        
        .card-body {
            padding: 1.5rem;
        }
        
        .btn {
            padding: 0.6rem 1rem;
            border-radius: 6px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            border: 1px solid transparent;
        }
        
        .btn-primary {
            background-color: #000;
            color: white;
            border-color: #000;
        }
        
        .btn-primary:hover {
            background-color: #333;
            border-color: #333;
        }
        
        .btn-outline-secondary {
            background-color: white;
            color: #6c757d;
            border-color: #d1d3e2;
        }
        
        .btn-outline-secondary:hover {
            background-color: #f8f9fa;
            color: #495057;
        }
        
        .form-control, .form-select {
            padding: 0.6rem 0.8rem;
            border-radius: 6px;
            border: 1px solid #d1d3e2;
            width: 100%;
            font-size: 0.9rem;
        }
        
        .form-control:focus, .form-select:focus {
            border-color: #000;
            outline: none;
            box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.1);
        }
        
        .table-responsive {
            border-radius: 6px;
            overflow: hidden;
        }
        
        .table {
            width: 100%;
            margin-bottom: 0;
            border-collapse: collapse;
        }
        
        .table thead th {
            background-color: #f8f9fa;
            padding: 0.8rem 1rem;
            text-align: left;
            font-weight: 600;
            color: #495057;
            border-bottom: 2px solid #e2e8f0;
        }
        
        .table tbody tr {
            border-bottom: 1px solid #e2e8f0;
        }
        
        .table tbody tr:hover {
            background-color: #f8f9fa;
        }
        
        .table tbody td {
            padding: 0.8rem 1rem;
            vertical-align: middle;
        }
        
        .badge {
            display: inline-flex;
            align-items: center;
            padding: 0.3rem 0.6rem;
            border-radius: 4px;
            font-size: 0.8rem;
            font-weight: 500;
            gap: 0.3rem;
        }
        
        .badge-entrada {
            background-color: #e8f5e8;
            color: #2e7d32;
        }
        
        .badge-saida {
            background-color: #ffeaea;
            color: #c62828;
        }
        
        .movement-icon {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.7rem;
        }
        
        .movement-in {
            background-color: #4caf50;
            color: white;
        }
        
        .movement-out {
            background-color: #f44336;
            color: white;
        }
        
        .pagination {
            display: flex;
            gap: 0.3rem;
            margin: 0;
            padding: 0;
            list-style: none;
        }
        
        .page-item .page-link {
            padding: 0.4rem 0.7rem;
            border: 1px solid #d1d3e2;
            border-radius: 4px;
            color: #495057;
            text-decoration: none;
            background-color: white;
            transition: all 0.2s ease;
        }
        
        .page-item.active .page-link {
            background-color: #000;
            border-color: #000;
            color: white;
        }
        
        .page-item .page-link:hover {
            background-color: #f8f9fa;
        }
        
        .stats-info {
            font-size: 0.8rem;
            color: #6c757d;
        }
        
        .input-group {
            display: flex;
        }
        
        .input-group .form-control {
            border-radius: 6px 0 0 6px;
        }
        
        .input-group .btn {
            border-radius: 0 6px 6px 0;
            border-left: none;
        }
        
        @media (max-width: 768px) {
            .main-container {
                padding: 1rem;
            }
            
            .section-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }
            
            .card-body {
                padding: 1rem;
            }
            
            .table thead th,
            .table tbody td {
                padding: 0.6rem 0.8rem;
            }
        }
    </style>
</head>
<body class="flex">
    <%- include('./partials/header'); %>
    
    <!-- Conteúdo Principal -->
    <main class="flex-1 overflow-auto bg-gray-50 min-h-screen">
        <div class="main-container">
            <!-- Header da Página -->
            <div class="section-header">
                <h1 class="section-title">
                    <i class="fas fa-exchange-alt mr-2"></i>
                    Todas as Movimentações
                </h1>
                <div class="user-info">
                    <i class="fas fa-user mr-1"></i>
                    Logado como: <strong><%= user.name %></strong>
                </div>
            </div>

            <!-- Card Principal -->
            <div class="card">
                <div class="card-header">
                    <h2 class="card-title">
                        <i class="fas fa-list mr-2"></i>
                        Histórico de Movimentações
                    </h2>
                </div>
                
                <div class="card-body">
                    <!-- Barra de Ferramentas -->
                    <div class="row mb-4">
                        <div class="col-md-4 mb-3">
                            <div class="input-group">
                                <input type="text" class="form-control" id="searchMovements" placeholder="Buscar por reagente, responsável...">
                                <button class="btn btn-outline-secondary" type="button" id="searchBtn">
                                    <i class="fas fa-search"></i>
                                </button>
                            </div>
                        </div>
                        <div class="col-md-3 mb-3">
                            <select class="form-select" id="typeFilter">
                                <option value="all">Todos os tipos</option>
                                <option value="entrada">Apenas entradas</option>
                                <option value="saida">Apenas saídas</option>
                            </select>
                        </div>
                        <div class="col-md-3 mb-3">
                            <button class="btn btn-outline-secondary w-100" id="refreshBtn">
                                <i class="fas fa-sync-alt mr-2"></i> Atualizar
                            </button>
                        </div>
                        <div class="col-md-2 mb-3">
                            <button class="btn btn-primary w-100" id="exportData">
                                <i class="fas fa-download mr-2"></i>Exportar
                            </button>
                        </div>
                    </div>

                    <!-- Informações de atualização -->
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <div class="stats-info">
                            <i class="fas fa-history mr-1"></i>
                            <span id="last-update">Atualizado às <span id="update-time"></span></span>
                        </div>
                        <div class="text-muted small" id="movementsTotal">Carregando...</div>
                    </div>

                    <!-- Tabela de Movimentações -->
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Data/Hora</th>
                                    <th>Tipo</th>
                                    <th>Reagente</th>
                                    <th>Quantidade</th>
                                    <th>Responsável</th>
                                    <th>Projeto/Fornecedor</th>
                                </tr>
                            </thead>
                            <tbody id="movementsTable">
                                <tr>
                                    <td colspan="6" class="text-center text-muted py-4">
                                        <div class="loading">
                                            <i class="fas fa-spinner fa-spin loading-spinner mr-2"></i>
                                            Carregando movimentações...
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <!-- Paginação -->
                    <div class="d-flex justify-content-center mt-4">
                        <nav>
                            <ul class="pagination" id="movementsPagination">
                                <!-- Paginação será gerada via JavaScript -->
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Container para Notificações -->
    <div class="toast-container"></div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Variáveis globais
        let currentPage = 1;
        const movementsPerPage = 15;
        let currentTypeFilter = 'all';
        let currentSearchTerm = '';

        // Função para exibir notificações
        function showToast(message, type = 'info') {
            const toastContainer = document.querySelector('.toast-container');
            const toastId = 'toast-' + Date.now();
            
            const toast = document.createElement('div');
            toast.className = `toast align-items-center text-bg-${type} border-0`;
            toast.id = toastId;
            toast.setAttribute('role', 'alert');
            toast.setAttribute('aria-live', 'assertive');
            toast.setAttribute('aria-atomic', 'true');
            
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-triangle'} me-2"></i>
                        ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            `;
            
            toastContainer.appendChild(toast);
            
            const bsToast = new bootstrap.Toast(toast, {
                delay: 4000
            });
            bsToast.show();
            
            toast.addEventListener('hidden.bs.toast', () => {
                toast.remove();
            });
        }

        // Função para carregar movimentações
        async function loadMovements(page = 1) {
            try {
                showLoading(true);
                
                const params = new URLSearchParams({
                    page: page,
                    limit: movementsPerPage,
                    type: currentTypeFilter,
                    search: currentSearchTerm
                });

                const response = await fetch(`/api/all-movements?${params}`);
                if (!response.ok) throw new Error('Erro ao carregar movimentações');
                
                const result = await response.json();
                
                displayMovementsTable(result.data);
                updateMovementsPagination(page, result.totalPages);
                document.getElementById('movementsTotal').textContent = `${result.total} registros`;
                document.getElementById('update-time').textContent = new Date().toLocaleTimeString('pt-BR');
                
            } catch (error) {
                console.error('Erro ao carregar movimentações:', error);
                document.getElementById('movementsTable').innerHTML = `
                    <tr>
                        <td colspan="6" class="text-center text-danger py-4">
                            <i class="fas fa-exclamation-triangle mr-2"></i>
                            Erro ao carregar movimentações
                        </td>
                    </tr>
                `;
            } finally {
                showLoading(false);
            }
        }

        // Função para exibir dados na tabela
        function displayMovementsTable(data) {
            const tableBody = document.getElementById('movementsTable');
            
            if (!data || data.length === 0) {
                tableBody.innerHTML = `
                    <tr>
                        <td colspan="6" class="text-center text-muted py-4">
                            <i class="fas fa-inbox mr-2"></i>
                            Nenhuma movimentação encontrada
                        </td>
                    </tr>
                `;
                return;
            }

            tableBody.innerHTML = data.map(movement => {
                const date = new Date(movement.date);
                const formattedDate = date.toLocaleDateString('pt-BR');
                const formattedTime = date.toLocaleTimeString('pt-BR', {hour: '2-digit', minute: '2-digit'});
                
                const isEntrada = movement.type === 'entrada';
                const badgeClass = isEntrada ? 'badge-entrada' : 'badge-saida';
                const badgeText = isEntrada ? 'Entrada' : 'Saída';
                const iconClass = isEntrada ? 'fa-arrow-down' : 'fa-arrow-up';
                const iconContainerClass = isEntrada ? 'movement-in' : 'movement-out';
                
                // Extrair fornecedor ou projeto
                let projectInfo = movement.project || '';
                if (isEntrada && projectInfo.includes('Fornecedor:')) {
                    projectInfo = projectInfo.replace('Fornecedor:', '').trim();
                }
                
                return `
                    <tr>
                        <td>
                            <div class="small">${formattedDate}</div>
                            <div class="text-muted smaller">${formattedTime}</div>
                        </td>
                        <td>
                            <span class="badge ${badgeClass}">
                                <div class="movement-icon ${iconContainerClass}">
                                    <i class="fas ${iconClass}"></i>
                                </div>
                                ${badgeText}
                            </span>
                        </td>
                        <td>
                            <strong>${movement.reagent}</strong>
                            <div class="text-muted small">${movement.unit}</div>
                        </td>
                        <td>
                            <span class="fw-bold ${isEntrada ? 'text-success' : 'text-danger'}">
                                ${movement.quantity}
                            </span>
                        </td>
                        <td>${movement.responsible}</td>
                        <td>
                            <small class="text-muted">${projectInfo || '-'}</small>
                        </td>
                    </tr>
                `;
            }).join('');
        }

        // Função para atualizar a paginação
        function updateMovementsPagination(currentPage, totalPages) {
            const pagination = document.getElementById('movementsPagination');
            
            if (totalPages <= 1) {
                pagination.innerHTML = '';
                return;
            }

            let paginationHTML = '';
            
            // Botão anterior
            if (currentPage > 1) {
                paginationHTML += `
                    <li class="page-item">
                        <button class="page-link" onclick="changePage(${currentPage - 1})">
                            <i class="fas fa-chevron-left"></i>
                        </button>
                    </li>
                `;
            }

            // Páginas
            for (let i = 1; i <= totalPages; i++) {
                if (i === 1 || i === totalPages || (i >= currentPage - 1 && i <= currentPage + 1)) {
                    paginationHTML += `
                        <li class="page-item ${i === currentPage ? 'active' : ''}">
                            <button class="page-link" onclick="changePage(${i})">${i}</button>
                        </li>
                    `;
                } else if (i === currentPage - 2 || i === currentPage + 2) {
                    paginationHTML += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
                }
            }

            // Botão próximo
            if (currentPage < totalPages) {
                paginationHTML += `
                    <li class="page-item">
                        <button class="page-link" onclick="changePage(${currentPage + 1})">
                            <i class="fas fa-chevron-right"></i>
                        </button>
                    </li>
                `;
            }

            pagination.innerHTML = paginationHTML;
        }

        // Função para mudar de página
        function changePage(page) {
            currentPage = page;
            loadMovements(page);
        }

        // Função para mostrar/ocultar loading
        function showLoading(show) {
            const tableBody = document.getElementById('movementsTable');
            if (show) {
                tableBody.innerHTML = `
                    <tr>
                        <td colspan="6" class="text-center text-muted py-4">
                            <i class="fas fa-spinner fa-spin mr-2"></i>
                            Carregando movimentações...
                        </td>
                    </tr>
                `;
            }
        }

        // Função para aplicar filtros
        function applyFilters() {
            currentPage = 1;
            currentTypeFilter = document.getElementById('typeFilter').value;
            currentSearchTerm = document.getElementById('searchMovements').value;
            loadMovements(1);
        }

        // Função para exportar dados
        function exportData() {
            showToast('Exportação de dados - Funcionalidade em desenvolvimento', 'info');
        }

        // Event Listeners
        document.getElementById('typeFilter').addEventListener('change', applyFilters);
        document.getElementById('searchBtn').addEventListener('click', applyFilters);
        document.getElementById('searchMovements').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') applyFilters();
        });
        document.getElementById('refreshBtn').addEventListener('click', () => {
            applyFilters();
            showToast('Dados atualizados!', 'success');
        });
        document.getElementById('exportData').addEventListener('click', exportData);

        // Carregar dados iniciais
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Página de movimentações carregada');
            loadMovements(1);
            
            // Atualizar a cada 30 segundos
            setInterval(() => {
                loadMovements(currentPage);
            }, 30000);
        });
    </script>
</body>
</html>