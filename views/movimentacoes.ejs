<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <%- include('./partials/head'); %>
    <style>
        :root {
            --primary: #2d3748;
            --secondary: #2d3748;
            --success: #28a745;
            --warning: #ffc107;
            --danger: #e74c3c;
            --info: #17a2b8;
            --light: #f8f9fa;
            --dark: #212529;
            --gray: #6c757d;
        }
        
        body {
            background-color: #f5f7fb;
            color: #333;
            min-height: 100vh;
        }
        
        .main-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 1.5rem;
        }
        
        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }
        
        .section-title {
            font-size: 1.75rem;
            font-weight: 700;
            color: #2d3748;
        }
        
        .card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            overflow: hidden;
            margin-bottom: 2rem;
        }
        
        .card-header {
            padding: 1.25rem 1.5rem;
            border-bottom: 1px solid #e2e8f0;
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        }
        
        .card-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: #2d3748;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .card-body {
            padding: 1.5rem;
        }
        
        .back-btn {
            background: transparent;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 0.6rem 1.2rem;
            font-size: 0.9rem;
            color: var(--primary);
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            text-decoration: none;
        }
        
        .back-btn:hover {
            background: var(--primary);
            color: white;
            border-color: var(--primary);
        }
        
        .chart-container {
            position: relative;
            height: 400px;
            width: 100%;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }
        
        .stat-card {
            background: white;
            padding: 1.5rem;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            text-align: center;
        }
        
        .stat-value {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }
        
        .stat-label {
            font-size: 0.9rem;
            color: var(--gray);
        }
        
        .text-success { color: var(--success); }
        .text-danger { color: var(--danger); }
        .text-primary { color: var(--primary); }
        .text-info { color: var(--info); }
        
        .table-responsive {
            overflow-x: auto;
        }
        
        .data-table {
            width: 100%;
            border-collapse: collapse;
        }
        
        .data-table th,
        .data-table td {
            padding: 0.75rem;
            text-align: left;
            border-bottom: 1px solid #e2e8f0;
            vertical-align: middle;
        }
        
        .data-table th {
            background-color: #f8f9fa;
            font-weight: 600;
            color: var(--dark);
        }
        
        .data-table tr:hover {
            background-color: #f8f9fa;
        }
        
        .badge {
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 0.75rem;
            font-weight: 500;
        }
        
        .badge-success { background: rgba(40, 167, 69, 0.15); color: var(--success); }
        .badge-danger { background: rgba(231, 76, 60, 0.15); color: var(--danger); }
        
        .filter-section {
            background: white;
            padding: 1.5rem;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            margin-bottom: 2rem;
        }
        
        .filter-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 1rem;
        }
        
        .form-group {
            margin-bottom: 1rem;
        }
        
        .form-label {
            font-weight: 600;
            margin-bottom: 0.5rem;
            display: block;
        }
        
        .form-control, .form-select {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #d1d3e2;
            border-radius: 8px;
            font-size: 1rem;
        }
        
        .search-input {
            position: relative;
        }
        
        .search-input .form-control {
            padding-left: 2.5rem;
        }
        
        .search-icon {
            position: absolute;
            left: 0.75rem;
            top: 50%;
            transform: translateY(-50%);
            color: var(--gray);
        }
        
        .btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1rem;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .btn-primary {
            background: var(--primary);
            color: white;
        }
        
        .btn-primary:hover {
            background: #2c5282;
            transform: translateY(-2px);
        }
        
        .btn-secondary {
            background: var(--gray);
            color: white;
        }
        
        .btn-secondary:hover {
            background: #5a6268;
        }
        
        .export-buttons {
            display: flex;
            gap: 1rem;
            margin-top: 1rem;
        }
        
        .export-btn {
            background: transparent;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 0.5rem 1rem;
            font-size: 0.9rem;
            color: var(--primary);
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .export-btn:hover {
            background: var(--primary);
            color: white;
        }
        
        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 0.5rem;
            margin-top: 1rem;
        }
        
        .page-btn {
            padding: 0.5rem 0.75rem;
            border: 1px solid #dee2e6;
            background: white;
            border-radius: 4px;
            cursor: pointer;
        }
        
        .page-btn.active {
            background: var(--primary);
            color: white;
            border-color: var(--primary);
        }
        
        .page-btn:hover:not(.active) {
            background: #f8f9fa;
        }
        
        .loading {
            text-align: center;
            padding: 2rem;
            color: var(--gray);
        }
        
        .reagent-summary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 1.5rem;
            border-radius: 8px;
            margin-bottom: 1rem;
        }
        
        .reagent-summary h4 {
            margin: 0 0 0.5rem 0;
            font-size: 1.25rem;
        }
        
        .reagent-summary p {
            margin: 0;
            opacity: 0.9;
        }
        
        /* BOTÕES DE AÇÃO PERFEITAMENTE ALINHADOS */
        .actions-cell {
            display: flex;
            gap: 0.5rem;
            align-items: center;
            justify-content: center;
            padding: 0.5rem;
            width: 100%;
            height: 100%;
        }

        .edit-btn, .delete-btn {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 32px;
            height: 32px;
            border: 1px solid;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 0.8rem;
            flex-shrink: 0;
        }

        .edit-btn {
            border-color: #0ea5e9;
            color: #0ea5e9;
            background: transparent;
        }

        .edit-btn:hover {
            background: #0ea5e9;
            color: white;
        }

        .delete-btn {
            border-color: #e53e3e;
            color: #e53e3e;
            background: transparent;
        }

        .delete-btn:hover {
            background: #e53e3e;
            color: white;
        }

        /* COLUNA DE AÇÕES CENTRALIZADA */
        .data-table td:last-child {
            width: 120px;
            min-width: 120px;
            text-align: center;
            padding: 0.5rem;
        }

        .data-table td:last-child {
            vertical-align: middle;
        }

        /* Loading no modal */
        .modal-loading {
            text-align: center;
            padding: 2rem;
            color: #6b7280;
        }

        /* Modal styles */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 1000;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background: white;
            padding: 2rem;
            border-radius: 12px;
            max-width: 600px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: 0 10px 25px rgba(0,0,0,0.2);
        }

        /* Notificação */
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 1rem 1.5rem;
            border-radius: 8px;
            color: white;
            z-index: 1001;
            max-width: 400px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            animation: slideIn 0.3s ease;
        }

        .notification.success { background: #10B981; }
        .notification.error { background: #EF4444; }
        .notification.info { background: #3B82F6; }

        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }
        
        @media (max-width: 768px) {
            .main-container {
                padding: 1rem;
            }
            
            .section-header {
                flex-direction: column;
                gap: 1rem;
                align-items: flex-start;
            }
            
            .stats-grid {
                grid-template-columns: 1fr;
            }
            
            .filter-grid {
                grid-template-columns: 1fr;
            }
            
            .chart-container {
                height: 300px;
            }
            
            .export-buttons {
                flex-wrap: wrap;
            }

            .modal-content {
                padding: 1rem;
                margin: 1rem;
            }
        }
    </style>
</head>
<body class="flex">
    <%- include('./partials/header'); %>
    
    <!-- Conteúdo Principal -->
    <main class="flex-1 overflow-auto bg-gray-50 min-h-screen">
        <div class="main-container">
            <!-- Header da Página -->
            <div class="section-header">
                <h1 class="section-title">
                    <i class="fas fa-chart-bar text-primary mr-2"></i>
                    Detalhes da Movimentação
                </h1>
                <a href="/relatorios" class="back-btn">
                    <i class="fas fa-arrow-left"></i> Voltar aos Relatórios
                </a>
            </div>
            
            <!-- Filtros Avançados -->
            <div class="filter-section">
                <h3 class="card-title mb-3">
                    <i class="fas fa-filter text-primary"></i> Filtros de Pesquisa
                </h3>
                <form id="filter-form">
                    <div class="filter-grid">
                        <div class="form-group">
                            <label class="form-label" for="year">Ano</label>
                            <select class="form-select" id="year" name="year">
                                <option value="2024">2024</option>
                                <option value="2025" selected>2025</option>
                                <option value="2026">2026</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label class="form-label" for="month">Mês</label>
                            <select class="form-select" id="month" name="month">
                                <option value="">Todos os meses</option>
                                <option value="1">Janeiro</option>
                                <option value="2">Fevereiro</option>
                                <option value="3">Março</option>
                                <option value="4">Abril</option>
                                <option value="5">Maio</option>
                                <option value="6">Junho</option>
                                <option value="7">Julho</option>
                                <option value="8">Agosto</option>
                                <option value="9">Setembro</option>
                                <option value="10">Outubro</option>
                                <option value="11">Novembro</option>
                                <option value="12">Dezembro</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label class="form-label" for="type">Tipo</label>
                            <select class="form-select" id="type" name="type">
                                <option value="">Todos os tipos</option>
                                <option value="entrada">Entradas</option>
                                <option value="saida">Saídas</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label class="form-label" for="reagent">Reagente</label>
                            <div class="search-input">
                                <i class="fas fa-search search-icon"></i>
                                <input type="text" class="form-control" id="reagent" name="reagent" 
                                       placeholder="Digite o nome do reagente...">
                            </div>
                        </div>
                    </div>
                    <div style="display: flex; gap: 1rem; align-items: center;">
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-search"></i> Pesquisar
                        </button>
                        <button type="button" class="btn btn-secondary" id="clear-filters">
                            <i class="fas fa-times"></i> Limpar Filtros
                        </button>
                    </div>
                </form>
            </div>
            
            <!-- Resumo do Reagente (aparece quando pesquisar por reagente específico) -->
            <div id="reagent-summary" class="reagent-summary" style="display: none;">
                <h4 id="reagent-name"></h4>
                <p id="reagent-stats"></p>
            </div>
            
            <!-- Estatísticas Rápidas -->
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-value text-primary" id="total-movements">0</div>
                    <div class="stat-label">Total de Movimentações</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value text-success" id="total-inputs">0</div>
                    <div class="stat-label">Total de Entradas</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value text-danger" id="total-outputs">0</div>
                    <div class="stat-label">Total de Saídas</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value text-info" id="avg-daily">0</div>
                    <div class="stat-label">Média Diária</div>
                </div>
            </div>
            
            <!-- Gráfico Detalhado -->
            <div class="card">
                <div class="card-header">
                    <h2 class="card-title">
                        <i class="fas fa-chart-line text-primary"></i>
                        Movimentação Mensal
                    </h2>
                </div>
                <div class="card-body">
                    <div class="chart-container">
                        <canvas id="detailedMovementChart"></canvas>
                    </div>
                </div>
            </div>
            
            <!-- Tabela de Movimentações -->
            <div class="card">
                <div class="card-header">
                    <h2 class="card-title">
                        <i class="fas fa-table text-primary"></i>
                        Histórico de Movimentações
                    </h2>
                    <div style="display: flex; gap: 1rem; align-items: center;">
                        <span class="stats-info" id="table-info">Mostrando 0 registros</span>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="data-table">
                            <thead>
                                <tr>
                                    <th style="width: 140px;">Data</th>
                                    <th style="min-width: 180px;">Reagente</th>
                                    <th style="width: 100px;">Tipo</th>
                                    <th style="width: 120px;">Quantidade</th>
                                    <th style="min-width: 150px;">Responsável</th>
                                    <th style="min-width: 150px;">Projeto</th>
                                    <th style="min-width: 200px;">Observações</th>
                                    <th style="width: 120px; text-align: center;">Ações</th>
                                </tr>
                            </thead>
                            <tbody id="movements-table">
                                <tr>
                                    <td colspan="8" class="loading">
                                        <i class="fas fa-spinner fa-spin"></i> Carregando dados...
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    
                    
                    <!-- Paginação -->
                    <div class="pagination" id="pagination">
                        <!-- Paginação será gerada via JavaScript -->
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Modal de Confirmação de Exclusão -->
    <div id="deleteModal" class="modal">
        <div class="modal-content">
            <div style="display: flex; align-items: center; gap: 0.75rem; margin-bottom: 1rem;">
                <div style="background: #fed7d7; width: 48px; height: 48px; border-radius: 50%; display: flex; align-items: center; justify-content: center;">
                    <i class="fas fa-exclamation-triangle" style="color: #e53e3e; font-size: 1.5rem;"></i>
                </div>
                <h3 style="margin: 0; color: #2d3748; font-size: 1.25rem;">Confirmar Exclusão</h3>
            </div>
            
            <p id="deleteModalMessage" style="margin-bottom: 1.5rem; color: #4a5568; line-height: 1.5;">
                Tem certeza que deseja excluir esta movimentação?
            </p>
            
            <div style="display: flex; gap: 1rem; justify-content: flex-end;">
                <button id="cancelDelete" class="btn btn-secondary" style="padding: 0.6rem 1.2rem; border: 1px solid #d1d5db; background: white; color: #374151;">
                    Cancelar
                </button>
                <button id="confirmDelete" class="btn btn-danger" style="padding: 0.6rem 1.2rem; background: #e53e3e; color: white; border: none; border-radius: 6px;">
                    <i class="fas fa-trash"></i> Excluir
                </button>
            </div>
        </div>
    </div>

    <!-- Modal de Edição de Movimentação -->
    <div id="editModal" class="modal">
        <div class="modal-content">
            <div style="display: flex; align-items: center; gap: 0.75rem; margin-bottom: 1.5rem;">
                <div style="background: #e0f2fe; width: 48px; height: 48px; border-radius: 50%; display: flex; align-items: center; justify-content: center;">
                    <i class="fas fa-edit" style="color: #0ea5e9; font-size: 1.5rem;"></i>
                </div>
                <h3 style="margin: 0; color: #2d3748; font-size: 1.25rem;">Editar Movimentação</h3>
            </div>
            
            <form id="editForm">
                <!-- Formulário será preenchido dinamicamente -->
            </form>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Variáveis globais
        let detailedChart = null;
        let currentYear = new Date().getFullYear();
        let currentPage = 1;
        const itemsPerPage = 15;
        let totalItems = 0;
        let movimentacaoToDelete = null;
        let movimentacaoToEdit = null;

        // Funções de API
        async function loadDetailedData(filters = {}) {
            try {
                const params = new URLSearchParams(filters);
                const response = await fetch(`/api/relatorios/movimentacao-detalhada?${params}`);
                return await response.json();
            } catch (error) {
                console.error('Erro ao carregar dados detalhados:', error);
                return null;
            }
        }

        async function loadMovements(filters = {}, page = 1) {
            try {
                const params = new URLSearchParams({
                    ...filters,
                    page: page,
                    limit: itemsPerPage
                });
                const response = await fetch(`/api/relatorios/movimentacoes?${params}`);
                const data = await response.json();
                
                if (data.data && data.data.length > 0) {
                    data.data = data.data.map(item => ({
                        ...item,
                        id_movimentacao: item.id_movimentacao
                    }));
                }
                
                return data;
            } catch (error) {
                console.error('Erro ao carregar movimentações:', error);
                return { data: [], total: 0, totalPages: 0 };
            }
        }

        async function loadReagentStats(reagentName) {
            try {
                const response = await fetch(`/api/relatorios/estatisticas-reagente?reagent=${encodeURIComponent(reagentName)}`);
                return await response.json();
            } catch (error) {
                console.error('Erro ao carregar estatísticas do reagente:', error);
                return null;
            }
        }


        // Funções de UI
        function updateStats(data) {
            if (!data) return;

            document.getElementById('total-movements').textContent = data.totalMovements || 0;
            document.getElementById('total-inputs').textContent = data.totalInputs || 0;
            document.getElementById('total-outputs').textContent = data.totalOutputs || 0;
            document.getElementById('avg-daily').textContent = data.avgDaily || 0;
        }

        async function updateReagentSummary(reagentName) {
            const summaryElement = document.getElementById('reagent-summary');
            
            if (!reagentName) {
                summaryElement.style.display = 'none';
                return;
            }

            const stats = await loadReagentStats(reagentName);
            if (stats) {
                document.getElementById('reagent-name').textContent = reagentName;
                document.getElementById('reagent-stats').textContent = 
                    `${stats.totalMovements} movimentações • ${stats.totalInputs} entradas • ${stats.totalOutputs} saídas`;
                summaryElement.style.display = 'block';
            } else {
                summaryElement.style.display = 'none';
            }
        }

        function initDetailedChart(data) {
            const ctx = document.getElementById('detailedMovementChart').getContext('2d');
            
            if (detailedChart) {
                detailedChart.destroy();
            }

            detailedChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: data.labels || [],
                    datasets: [
                        {
                            label: 'Entradas',
                            data: data.inputs || [],
                            backgroundColor: 'rgba(16, 185, 129, 0.7)',
                            borderColor: '#10B981',
                            borderWidth: 1
                        },
                        {
                            label: 'Saídas',
                            data: data.outputs || [],
                            backgroundColor: 'rgba(239, 68, 68, 0.7)',
                            borderColor: '#EF4444',
                            borderWidth: 1
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: true,
                            text: `Movimentação Mensal - ${currentYear}`
                        },
                        legend: {
                            position: 'top',
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Quantidade de Movimentações'
                            }
                        },
                        x: {
                            title: {
                                display: true,
                                text: 'Meses'
                            }
                        }
                    }
                }
            });
        }

        function updateTable(movements, total, currentPage, totalPages) {
    const tbody = document.getElementById('movements-table');
    const tableInfo = document.getElementById('table-info');
    
    totalItems = total;
    tableInfo.textContent = `Mostrando ${movements.length} de ${total} registros`;

    if (movements.length === 0) {
        tbody.innerHTML = `
            <tr>
                <td colspan="8" class="loading">
                    <i class="fas fa-search"></i> Nenhuma movimentação encontrada
                </td>
            </tr>
        `;
        return;
    }

    let html = '';
    movements.forEach(movement => {
        const date = new Date(movement.data_movimentacao).toLocaleDateString('pt-BR');
        const time = new Date(movement.data_movimentacao).toLocaleTimeString('pt-BR');
        
        html += `
            <tr>
                <td>
                    <div style="font-weight: 500;">${date}</div>
                    <small style="color: #6b7280; font-size: 0.75rem;">${time}</small>
                </td>
                <td>
                    <strong>${movement.nome}</strong>
                    ${movement.categoria ? `<br><small style="color: #6b7280;">${movement.categoria}</small>` : ''}
                </td>
                <td>
                    <span class="badge ${movement.tipo === 'entrada' ? 'badge-success' : 'badge-danger'}">
                        ${movement.tipo === 'entrada' ? 'Entrada' : 'Saída'}
                    </span>
                </td>
                <td>
                    <strong>${movement.quantidade}</strong>
                    <div style="color: #6b7280; font-size: 0.875rem;">${movement.unidade_medida}</div>
                </td>
                <td>${movement.responsavel}</td>
                <td>${movement.projeto_experimento || '-'}</td>
                <td>${movement.observacoes || '-'}</td>

                <td>
                    <div class="actions-cell">
                        <button class="edit-btn" onclick="openEditModal('${movement.id_movimentacao}')" title="Editar movimentação">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="delete-btn" onclick="openDeleteModal('${movement.id_movimentacao}', {reagent: '${movement.nome.replace(/'/g, "\\'")}', quantidade: '${movement.quantidade}', unidade: '${movement.unidade_medida}'})" title="Excluir movimentação">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </td>
            </tr>
        `;
    });
    
    tbody.innerHTML = html;
    updatePagination(currentPage, totalPages);
}
        function updatePagination(currentPage, totalPages) {
            const paginationElement = document.getElementById('pagination');
            
            if (totalPages <= 1) {
                paginationElement.innerHTML = '';
                return;
            }

            let html = '';
            
            // Botão anterior
            html += `<button class="page-btn" ${currentPage === 1 ? 'disabled' : ''} 
                     onclick="changePage(${currentPage - 1})">
                     <i class="fas fa-chevron-left"></i></button>`;
            
            // Páginas
            for (let i = 1; i <= totalPages; i++) {
                if (i === 1 || i === totalPages || (i >= currentPage - 1 && i <= currentPage + 1)) {
                    html += `<button class="page-btn ${i === currentPage ? 'active' : ''}" 
                             onclick="changePage(${i})">${i}</button>`;
                } else if (i === currentPage - 2 || i === currentPage + 2) {
                    html += `<span class="page-btn" style="border: none; background: transparent;">...</span>`;
                }
            }
            
            // Botão próximo
            html += `<button class="page-btn" ${currentPage === totalPages ? 'disabled' : ''} 
                     onclick="changePage(${currentPage + 1})">
                     <i class="fas fa-chevron-right"></i></button>`;
            
            paginationElement.innerHTML = html;
        }

        // Funções de navegação e filtros
        function getFiltersFromForm() {
            const formData = new FormData(document.getElementById('filter-form'));
            return {
                year: formData.get('year') || currentYear,
                month: formData.get('month') || '',
                type: formData.get('type') || '',
                reagent: formData.get('reagent') || ''
            };
        }

        async function applyFilters(page = 1) {
            const filters = getFiltersFromForm();
            
            currentYear = filters.year;
            currentPage = page;

            document.getElementById('movements-table').innerHTML = `
                <tr>
                    <td colspan="8" class="loading">
                        <i class="fas fa-spinner fa-spin"></i> Carregando dados...
                    </td>
                </tr>
            `;

            const [detailedData, movementsData] = await Promise.all([
                loadDetailedData(filters),
                loadMovements(filters, page)
            ]);

            if (detailedData) {
                updateStats(detailedData);
                initDetailedChart(detailedData);
            }

            updateTable(movementsData.data, movementsData.total, page, movementsData.totalPages);
            
            if (filters.reagent) {
                await updateReagentSummary(filters.reagent);
            } else {
                document.getElementById('reagent-summary').style.display = 'none';
            }
        }

        async function changePage(page) {
            if (page < 1 || page > Math.ceil(totalItems / itemsPerPage)) return;
            
            currentPage = page;
            const filters = getFiltersFromForm();
            
            const movementsData = await loadMovements(filters, page);
            updateTable(movementsData.data, movementsData.total, page, movementsData.totalPages);
        }

        // Funções de exclusão
        function openDeleteModal(movimentacaoId, movimentacaoData) {
            movimentacaoToDelete = movimentacaoId;
            const message = `Tem certeza que deseja excluir a movimentação de ${movimentacaoData.quantidade} ${movimentacaoData.unidade} de ${movimentacaoData.reagent}?`;
            document.getElementById('deleteModalMessage').textContent = message;
            document.getElementById('deleteModal').style.display = 'flex';
        }

        function closeDeleteModal() {
            document.getElementById('deleteModal').style.display = 'none';
            movimentacaoToDelete = null;
        }

        async function deleteMovimentacao(movimentacaoId) {
            try {
                const response = await fetch(`/api/movimentacoes/${movimentacaoId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });

                const result = await response.json();

                if (result.success) {
                    showNotification(result.message, 'success');
                    closeDeleteModal();
                    await applyFilters(currentPage);
                } else {
                    throw new Error(result.message);
                }
            } catch (error) {
                console.error('Erro ao excluir movimentação:', error);
                showNotification('Erro ao excluir movimentação: ' + error.message, 'error');
            }
        }

        // Funções de edição
        async function openEditModal(movimentacaoId) {
            movimentacaoToEdit = movimentacaoId;
            
            document.getElementById('editForm').innerHTML = `
                <div class="modal-loading">
                    <i class="fas fa-spinner fa-spin fa-2x"></i>
                    <p>Carregando dados da movimentação...</p>
                </div>
            `;
            
            document.getElementById('editModal').style.display = 'flex';

            try {
                const response = await fetch(`/api/movimentacoes/${movimentacaoId}`);
                const result = await response.json();

                if (result.success) {
                    const movimentacao = result.data;
                    populateEditForm(movimentacao);
                } else {
                    throw new Error(result.message);
                }
            } catch (error) {
                console.error('Erro ao carregar dados da movimentação:', error);
                showNotification('Erro ao carregar dados: ' + error.message, 'error');
                closeEditModal();
            }
        }

        function populateEditForm(movimentacao) {
            document.getElementById('editForm').innerHTML = `
                <input type="hidden" id="editMovimentacaoId" value="${movimentacao.id_movimentacao}">
                
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; margin-bottom: 1.5rem;">
                    <div class="form-group">
                        <label class="form-label" for="editProduto">Produto</label>
                        <input type="text" class="form-control" id="editProduto" value="${movimentacao.produto_nome}" readonly style="background: #f9fafb;">
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label" for="editTipo">Tipo</label>
                        <input type="text" class="form-control" id="editTipo" value="${movimentacao.tipo === 'entrada' ? 'Entrada' : 'Saída'}" readonly style="background: #f9fafb;">
                    </div>
                </div>

                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; margin-bottom: 1.5rem;">
                    <div class="form-group">
                        <label class="form-label" for="editQuantidade">Quantidade *</label>
                        <input type="number" class="form-control" id="editQuantidade" value="${movimentacao.quantidade}" step="0.01" min="0.01" required>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label" for="editUnidade">Unidade</label>
                        <input type="text" class="form-control" id="editUnidade" value="${movimentacao.unidade_medida}" readonly style="background: #f9fafb;">
                    </div>
                </div>

                <div class="form-group" style="margin-bottom: 1.5rem;">
                    <label class="form-label" for="editResponsavel">Responsável *</label>
                    <input type="text" class="form-control" id="editResponsavel" value="${movimentacao.responsavel}" required>
                </div>

                <div class="form-group" style="margin-bottom: 1.5rem;">
                    <label class="form-label" for="editProjeto">Projeto/Experimento</label>
                    <input type="text" class="form-control" id="editProjeto" value="${movimentacao.projeto_experimento || ''}">
                </div>

                <div class="form-group" style="margin-bottom: 1.5rem;">
                    <label class="form-label" for="editObservacoes">Observações</label>
                    <textarea class="form-control" id="editObservacoes" rows="3">${movimentacao.observacoes || ''}</textarea>
                </div>

                <div class="form-group" style="margin-bottom: 1.5rem;">
                    <label class="form-label" for="editData">Data da Movimentação</label>
                    <input type="datetime-local" class="form-control" id="editData" value="${movimentacao.data_movimentacao_formatada}">
                </div>

                <div style="display: flex; gap: 1rem; justify-content: flex-end; margin-top: 2rem;">
                    <button type="button" id="cancelEdit" class="btn btn-secondary" style="padding: 0.6rem 1.2rem; border: 1px solid #d1d5db; background: white; color: #374151;">
                        Cancelar
                    </button>
                    <button type="submit" class="btn btn-primary" style="padding: 0.6rem 1.2rem; background: #0ea5e9; color: white; border: none; border-radius: 6px;">
                        <i class="fas fa-save"></i> Salvar Alterações
                    </button>
                </div>
            `;

            document.getElementById('cancelEdit').addEventListener('click', closeEditModal);
            document.getElementById('editForm').addEventListener('submit', handleEditSubmit);
        }

        async function handleEditSubmit(e) {
            e.preventDefault();
            
            const formData = {
                quantidade: document.getElementById('editQuantidade').value,
                responsavel: document.getElementById('editResponsavel').value,
                projeto_experimento: document.getElementById('editProjeto').value,
                observacoes: document.getElementById('editObservacoes').value,
                data_movimentacao: document.getElementById('editData').value
            };

            if (!formData.quantidade || !formData.responsavel) {
                showNotification('Quantidade e responsável são obrigatórios', 'error');
                return;
            }

            try {
                const response = await fetch(`/api/movimentacoes/${movimentacaoToEdit}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(formData)
                });

                const result = await response.json();

                if (result.success) {
                    showNotification(result.message, 'success');
                    closeEditModal();
                    await applyFilters(currentPage);
                } else {
                    throw new Error(result.message);
                }
            } catch (error) {
                console.error('Erro ao atualizar movimentação:', error);
                showNotification('Erro ao atualizar movimentação: ' + error.message, 'error');
            }
        }

        function closeEditModal() {
            document.getElementById('editModal').style.display = 'none';
            movimentacaoToEdit = null;
        }

        // Funções utilitárias
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.innerHTML = `
                <div style="display: flex; align-items: center; gap: 0.5rem;">
                    <i class="fas fa-${type === 'success' ? 'check' : type === 'error' ? 'exclamation-triangle' : 'info'}"></i>
                    <span>${message}</span>
                </div>
            `;

            document.body.appendChild(notification);

            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 5000);
        }

        // Event Listeners
        document.addEventListener('DOMContentLoaded', async () => {
            await applyFilters(1);
        });

        document.getElementById('filter-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            await applyFilters(1);
        });

        document.getElementById('clear-filters').addEventListener('click', () => {
            document.getElementById('filter-form').reset();
            document.getElementById('year').value = currentYear;
            applyFilters(1);
        });

        document.getElementById('export-chart-png').addEventListener('click', () => {
            if (detailedChart) {
                const link = document.createElement('a');
                link.download = `movimentacao-${currentYear}.png`;
                link.href = detailedChart.toBase64Image();
                link.click();
            }
        });

        document.getElementById('export-table-csv').addEventListener('click', async () => {
            const filters = getFiltersFromForm();
            const params = new URLSearchParams({ ...filters, format: 'csv' });
            window.open(`/api/relatorios/exportar-movimentacoes?${params}`, '_blank');
        });

        document.getElementById('cancelDelete').addEventListener('click', closeDeleteModal);
        document.getElementById('confirmDelete').addEventListener('click', () => {
            if (movimentacaoToDelete) {
                deleteMovimentacao(movimentacaoToDelete);
            }
        });

        document.getElementById('deleteModal').addEventListener('click', (e) => {
            if (e.target.id === 'deleteModal') {
                closeDeleteModal();
            }
        });

        document.getElementById('editModal').addEventListener('click', (e) => {
            if (e.target.id === 'editModal') {
                closeEditModal();
            }
        });

        
    </script>
</body>
</html>