<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <%- include('./partials/head', {title: 'Editar Produto - Sistema de Gestão'}) %>
    <style>
        :root {
            --primary: #2d3748;
            --secondary: #2d3748;
            --success: #2d3748;
            --warning: #2d3748;
            --info: #2d3748;
            --light: #f8f9fa;
            --dark: #212529;
            --gray: #6c757d;
            --light-gray: #e9ecef;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Inter', sans-serif;
        }
        
        body {
            background-color: #f5f7fb;
            color: #333;
            min-height: 100vh;
        }
        
        .flex {
            display: flex;
        }
        
        .flex-1 {
            flex: 1;
        }
        
        .overflow-auto {
            overflow: auto;
        }
        
        .min-h-screen {
            min-height: 100vh;
        }
        
        /* Layout principal */
        .main-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 1.5rem;
        }
        
        /* Header da seção */
        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }
        
        .section-title {
            font-size: 1.75rem;
            font-weight: 700;
            color: #2d3748;
        }
        
        /* Card do formulário */
        .form-card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            overflow: hidden;
            margin-bottom: 2rem;
        }
        
        .form-card-header {
            padding: 1.25rem 1.5rem;
            border-bottom: 1px solid #e2e8f0;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        }
        
        .form-card-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: #2d3748;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .form-card-body {
            padding: 1.5rem;
        }
        
        .form-section {
            margin-bottom: 2rem;
            padding-bottom: 1.5rem;
            border-bottom: 1px solid #e2e8f0;
        }
        
        .form-section:last-child {
            border-bottom: none;
            margin-bottom: 0;
        }
        
        .section-heading {
            font-size: 1.1rem;
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 1rem;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid #4361ee;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .form-label {
            font-weight: 500;
            color: #4a5568;
            margin-bottom: 0.5rem;
            display: block;
        }
        
        .required-label::after {
            content: " *";
            color: #e53e3e;
        }
        
        .form-control {
            width: 100%;
            padding: 0.75rem 1rem;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            font-size: 1rem;
            transition: all 0.2s ease;
        }
        
        .form-control:focus {
            outline: none;
            border-color: #4361ee;
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.15);
        }
        
        .form-select {
            width: 100%;
            padding: 0.75rem 1rem;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            font-size: 1rem;
            background-color: white;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e");
            background-position: right 0.5rem center;
            background-repeat: no-repeat;
            background-size: 1.5em 1.5em;
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
        }
        
        .form-select:focus {
            outline: none;
            border-color: #4361ee;
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.15);
        }
        
        textarea.form-control {
            min-height: 100px;
            resize: vertical;
        }
        
        .form-check {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .form-check-input {
            width: 18px;
            height: 18px;
            border: 1px solid #e2e8f0;
            border-radius: 4px;
            appearance: none;
            -webkit-appearance: none;
            background-color: white;
            position: relative;
            cursor: pointer;
        }
        
        .form-check-input:checked {
            background-color: #4361ee;
            border-color: #4361ee;
        }
        
        .form-check-input:checked::before {
            content: "✓";
            position: absolute;
            color: white;
            font-size: 12px;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }
        
        .form-check-label {
            font-weight: 400;
            color: #4a5568;
            cursor: pointer;
        }
        
        .form-check-inline {
            display: inline-flex;
            align-items: center;
            margin-right: 1rem;
        }
        
        .btn {
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            border: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .danger-zone {
            background: rgba(245, 101, 101, 0.1);
            border-left: 4px solid #e53e3e;
            padding: 1rem 1.5rem;
            border-radius: 8px;
            margin: 1.5rem 0;
        }
        
        .danger-zone h6 {
            color: #e53e3e;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 0.5rem;
        }
        
        .danger-zone p {
            color: #718096;
            margin-bottom: 0;
            font-size: 0.9rem;
        }
        
        .form-actions {
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
            margin-top: 1.5rem;
        }
        
        .is-invalid {
            border-color: #e53e3e;
        }
        
        @media (max-width: 768px) {
            .main-container {
                padding: 1rem;
            }
            
            .section-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }
            
            .form-actions {
                flex-direction: column;
            }
            
            .btn {
                width: 100%;
                justify-content: center;
            }
        }

        /* Estilos para formulário responsivo */
        .form-row {
            display: flex;
            flex-wrap: wrap;
            margin: 0 -0.75rem;
        }

        .form-group {
            flex: 1 0 100%;
            padding: 0 0.75rem;
            margin-bottom: 1rem;
        }

        .radio-group {
            margin-top: 0.5rem;
        }

        .form-check {
            margin-bottom: 0.5rem;
        }

        /* Para tablets */
        @media (min-width: 576px) {
            .form-row .form-group {
                flex: 0 0 50%;
                max-width: 50%;
            }
            
            .form-row-3 .form-group {
                flex: 0 0 33.333333%;
                max-width: 33.333333%;
            }
        }

        /* Para desktop */
        @media (min-width: 992px) {
            .form-row .form-group {
                flex: 0 0 50%;
                max-width: 50%;
            }
            
            .form-row-3 .form-group {
                flex: 0 0 33.333333%;
                max-width: 33.333333%;
            }
        }

        /* Ajustes para telas muito pequenas (menos de 400px) */
        @media (max-width: 400px) {
            .form-group {
                flex: 1 0 100%;
                max-width: 100%;
            }
            
            .radio-group {
                display: flex;
                flex-direction: column;
                gap: 0.5rem;
            }
        }
        
        .form-actions {
            display: flex;
            gap: 15px;
            padding: 20px;
            justify-content: center;
            align-items: center;
            background-color: #f8f9fa;
            border-radius: 10px;
            margin: 20px 0;
        }

        .btn {
            border: none;
            border-radius: 8px;
            padding: 14px 26px;
            font-size: 15px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            display: inline-flex;
            align-items: center;
            gap: 10px;
            text-decoration: none;
            position: relative;
            overflow: hidden;
        }

        .btn-primary {
            background-color: #2c3e50;
            color: #ffffff;
        }

        .btn-primary:hover {
            background-color: rgb(62, 75, 87);
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }

        .btn-secondary {
            background-color: #95a5a6;
            color: #ffffff;
        }

        .btn-secondary:hover {
            background-color: #7f8c8d;
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }

        .btn:active {
            transform: translateY(0);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.7s ease;
        }

        .btn:hover::before {
            left: 100%;
        }

        .btn i {
            font-size: 18px;
            transition: transform 0.3s ease;
        }

        .btn:hover i {
            transform: rotate(90deg);
        }
        
        .alert {
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1.5rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .alert-error {
            background-color: #fee2e2;
            color: #b91c1c;
            border: 1px solid #fecaca;
        }
    </style>
</head>
<body class="flex">
    <%- include('./partials/header'); %>
    
    <!-- Conteúdo Principal -->
    <main class="flex-1 overflow-auto bg-gray-50 min-h-screen">
        <div class="main-container">
            <!-- Header da Página -->
            <div class="section-header">
                <h1 class="section-title">
                    <i class="fas fa-edit"></i>
                    Editar Produto
                </h1>
                <a href="/produtos" class="btn btn-secondary">
                    <i class="fas fa-arrow-left"></i> Voltar aos Produtos
                </a>
            </div>
            
            <!-- Formulário de Edição de Produto -->
            <div class="form-card">
                <div class="form-card-header">
                    <h2 class="form-card-title">
                        <i class="fas fa-edit"></i>
                        Formulário de Edição
                    </h2>
                </div>
                <div class="form-card-body">
                    <% if (error) { %>
                        <div class="alert alert-error">
                            <i class="fas fa-exclamation-circle"></i>
                            <%= error %>
                        </div>
                    <% } %>
                    
                    <form class="product-form" method="POST" action="/produtos/editar/<%= produto.id_produto %>">
                        <!-- Informações Básicas -->
                        <div class="form-section">
                            <h5 class="section-heading">
                                <i class="fas fa-info-circle"></i>
                                Informações Básicas
                            </h5>
                            
                            <div class="form-row">
                                <div class="form-group">
                                    <label for="productName" class="form-label required-label">Nome do Produto</label>
                                    <input type="text" class="form-control" id="productName" name="productName" value="<%= produto.nome %>" required>
                                </div>
                                
                                <div class="form-group">
                                    <label for="productType" class="form-label required-label">Categoria</label>
                                    <select class="form-select dynamic-select" id="productType" name="productType" required data-campo="productType">
                                        <option value="">Selecione uma categoria</option>
                                        <!-- Opções serão carregadas via JavaScript -->
                                    </select>
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <label for="productDescription" class="form-label">Descrição</label>
                                <textarea class="form-control" id="productDescription" name="productDescription" rows="3"><%= produto.descricao || '' %></textarea>
                            </div>
                        </div>

                        <!-- Informações de Segurança -->
                        <div class="form-section">
                            <h5 class="section-heading">
                                <i class="fas fa-exclamation-triangle"></i>
                                Informações de Segurança
                            </h5>
                            
                            <div class="form-row">
                                <div class="form-group">
                                    <label for="dangerLevel" class="form-label">Grau de Periculosidade</label>
                                    <select class="form-select dynamic-select" id="dangerLevel" name="dangerLevel" data-campo="dangerLevel">
                                        <option value="">Selecione o grau</option>
                                        <!-- Opções serão carregadas via JavaScript -->
                                    </select>
                                </div>
                                
                                <div class="form-group">
                                    <label for="regulatoryOrg" class="form-label">Órgão Regulador</label>
                                    <select class="form-select dynamic-select" id="regulatoryOrg" name="regulatoryOrg" data-campo="regulatoryOrg">
                                        <option value="">Selecione o órgão</option>
                                        <!-- Opções serão carregadas via JavaScript -->
                                    </select>
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <label for="safetyInstructions" class="form-label">Instruções de Segurança</label>
                                <textarea class="form-control" id="safetyInstructions" name="safetyInstructions" rows="3"><%= produto.instrucoes_seguranca || '' %></textarea>
                            </div>
                        </div>

                        <!-- Estoque e Quantidade -->
                        <div class="form-section">
                            <h5 class="section-heading">
                                <i class="fas fa-boxes"></i>
                                Estoque e Quantidade
                            </h5>
                            
                            <div class="form-row">
                                <div class="form-group">
                                    <label for="stockQuantity" class="form-label required-label">Quantidade em Estoque</label>
                                    <input type="number" class="form-control" id="stockQuantity" name="stockQuantity" value="<%= produto.quantidade %>" min="0" required>
                                </div>
                                
                                <div class="form-group">
                                    <label for="minStock" class="form-label">Estoque Mínimo</label>
                                    <input type="number" class="form-control" id="minStock" name="minStock" value="<%= produto.estoque_minimo || '' %>" min="0">
                                </div>
                                
                                <div class="form-group">
                                    <label for="unit" class="form-label required-label">Unidade de Medida</label>
                                    <select class="form-select dynamic-select" id="unit" name="unit" required data-campo="unit">
                                        <option value="">Selecione a unidade</option>
                                        <!-- Opções serão carregadas via JavaScript -->
                                    </select>
                                </div>
                            </div>
                            
                            <div class="form-row">
                                <div class="form-group">
                                    <label for="location" class="form-label">Localização</label>
                                    <input type="text" class="form-control" id="location" name="location" value="<%= produto.localizacao || '' %>">
                                </div>
                                
                                <div class="form-group">
                                    <label class="form-label">Disponibilidade</label>
                                    <div class="radio-group">
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="availability" id="available" 
                                                value="available" <%= produto.disponivel ? 'checked' : '' %>>
                                            <label class="form-check-label" for="available">Disponível</label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="availability" id="unavailable" 
                                                value="unavailable" <%= !produto.disponivel ? 'checked' : '' %>>
                                            <label class="form-check-label" for="unavailable">Indisponível</label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Informações Adicionais -->
                        <div class="form-section">
                            <h5 class="section-heading">
                                <i class="fas fa-ellipsis-h"></i>
                                Informações Adicionais
                            </h5>
                            
                            <div class="form-row">
                                <div class="form-group">
                                    <label for="supplier" class="form-label">Fornecedor</label>
                                    <select class="form-select dynamic-select" id="supplier" name="supplier" data-campo="supplier">
                                        <option value="">Selecione o fornecedor</option>
                                        <!-- Opções serão carregadas via JavaScript -->
                                    </select>
                                </div>
                                
                                <div class="form-group">
                                    <label for="purchaseDate" class="form-label">Data de Aquisição</label>
                                    <input type="date" class="form-control" id="purchaseDate" name="purchaseDate" 
                                        value="<%= produto.data_aquisicao ? produto.data_aquisicao.toISOString().split('T')[0] : '' %>">
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <label for="notes" class="form-label">Observações</label>
                                <textarea class="form-control" id="notes" name="notes" rows="3"><%= produto.observacoes || '' %></textarea>
                            </div>
                        </div>
                        
                        <div class="form-actions">
                            <button type="button" class="btn btn-secondary" onclick="window.history.back()">
                                <i class="fas fa-times-circle"></i> Cancelar
                            </button>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save"></i> Salvar Alterações
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </main>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Dados do produto atual para pré-seleção
            const produtoAtual = {
                productType: '<%= produto.tipo %>',
                dangerLevel: '<%= produto.grau_periculosidade %>',
                regulatoryOrg: '<%= produto.orgao_regulador %>',
                unit: '<%= produto.unidade_medida %>',
                supplier: '<%= produto.fornecedor %>'
            };
        
            // Mapeamento de campos para labels
            const campoLabels = {
                'productType': 'Categoria',
                'dangerLevel': 'Grau de Periculosidade', 
                'regulatoryOrg': 'Órgão Regulador',
                'unit': 'Unidade de Medida',
                'supplier': 'Fornecedor'
            };
        
            // Opções padrão para cada campo
            const opcoesPadrao = {
                'productType': ['acido', 'base', 'solvente', 'indicador', 'sal', 'outro'],
                'dangerLevel': ['baixo', 'medio', 'alto', 'muito_alto'],
                'regulatoryOrg': ['policia-federal', 'exercito', 'anvisa', 'outro'],
                'unit': ['ml', 'l', 'mg', 'g', 'kg', 'unidade'],
                'supplier': []
            };
        
            // Formatador de texto para exibição
            function formatarTexto(texto) {
                if (!texto) return '';
                return texto
                    .split('_')
                    .map(palavra => palavra.charAt(0).toUpperCase() + palavra.slice(1))
                    .join(' ')
                    .replace(/\b\w/g, l => l.toUpperCase());
            }
        
            // Carregar opções para todos os selects dinâmicos
            async function carregarOpcoes() {
                const selects = document.querySelectorAll('.dynamic-select');
                
                for (const select of selects) {
                    const campo = select.dataset.campo;
                    await carregarOpcoesCampo(select, campo);
                }
            }
        
            // Carregar opções para um campo específico
            async function carregarOpcoesCampo(select, campo) {
                try {
                    const response = await fetch(`/api/opcoes/${campo}`);
                    const opcoes = await response.json();
                    
                    // Limpar opções existentes (exceto a primeira placeholder)
                    while (select.options.length > 0) {
                        select.remove(0);
                    }
                    
                    // Adicionar placeholder
                    const placeholder = document.createElement('option');
                    placeholder.value = '';
                    placeholder.textContent = `Selecione ${campoLabels[campo].toLowerCase()}...`;
                    placeholder.disabled = true;
                    placeholder.selected = true;
                    select.appendChild(placeholder);
                    
                    // Adicionar opção "Adicionar nova..."
                    const addOption = document.createElement('option');
                    addOption.value = '_add_new_';
                    addOption.textContent = '+ Adicionar nova opção...';
                    addOption.style.color = '#4361ee';
                    addOption.style.fontWeight = 'bold';
                    select.appendChild(addOption);
                    
                    // Adicionar opções existentes do banco
                    opcoes.forEach(opcao => {
                        if (opcao && opcao.trim() !== '') {
                            const option = document.createElement('option');
                            option.value = opcao;
                            option.textContent = formatarTexto(opcao);
                            select.appendChild(option);
                        }
                    });
                    
                    // Adicionar opções padrão que não estão no banco
                    if (opcoesPadrao[campo]) {
                        opcoesPadrao[campo].forEach(opcao => {
                            if (!opcoes.includes(opcao)) {
                                const option = document.createElement('option');
                                option.value = opcao;
                                option.textContent = formatarTexto(opcao);
                                select.appendChild(option);
                            }
                        });
                    }
                    
                    // Selecionar o valor atual do produto
                    const valorAtual = produtoAtual[campo];
                    if (valorAtual && valorAtual !== 'null' && valorAtual !== 'undefined' && valorAtual.trim() !== '') {
                        const optionParaSelecionar = select.querySelector(`option[value="${valorAtual}"]`);
                        if (optionParaSelecionar) {
                            optionParaSelecionar.selected = true;
                            placeholder.selected = false;
                        } else {
                            // Se o valor atual não existe nas opções, adicionar como nova opção
                            const novaOption = document.createElement('option');
                            novaOption.value = valorAtual;
                            novaOption.textContent = formatarTexto(valorAtual);
                            select.insertBefore(novaOption, addOption);
                            novaOption.selected = true;
                            placeholder.selected = false;
                        }
                    }
                    
                } catch (error) {
                    console.error(`Erro ao carregar opções para ${campo}:`, error);
                    carregarOpcoesPadrao(select, campo);
                }
            }
        
            // Carregar opções padrão em caso de erro
            function carregarOpcoesPadrao(select, campo) {
                while (select.options.length > 0) {
                    select.remove(0);
                }
                
                // Placeholder
                const placeholder = document.createElement('option');
                placeholder.value = '';
                placeholder.textContent = `Selecione ${campoLabels[campo].toLowerCase()}...`;
                placeholder.disabled = true;
                select.appendChild(placeholder);
                
                // Opção "Adicionar nova"
                const addOption = document.createElement('option');
                addOption.value = '_add_new_';
                addOption.textContent = '+ Adicionar nova opção...';
                addOption.style.color = '#4361ee';
                addOption.style.fontWeight = 'bold';
                select.appendChild(addOption);
                
                // Opções padrão
                if (opcoesPadrao[campo]) {
                    opcoesPadrao[campo].forEach(opcao => {
                        const option = document.createElement('option');
                        option.value = opcao;
                        option.textContent = formatarTexto(opcao);
                        select.appendChild(option);
                    });
                }
                
                // Selecionar valor atual
                const valorAtual = produtoAtual[campo];
                if (valorAtual && valorAtual !== 'null' && valorAtual !== 'undefined' && valorAtual.trim() !== '') {
                    const optionParaSelecionar = select.querySelector(`option[value="${valorAtual}"]`);
                    if (optionParaSelecionar) {
                        optionParaSelecionar.selected = true;
                        placeholder.selected = false;
                    }
                }
            }
        
            // Adicionar nova opção
            async function adicionarNovaOpcao(select, campo) {
                const label = campoLabels[campo] || campo;
                const novaOpcao = prompt(`Digite o novo valor para "${label}":`);
                
                if (!novaOpcao || novaOpcao.trim() === '') {
                    return;
                }
                
                const opcaoFormatada = novaOpcao.trim().toLowerCase();
                
                // Verificar se já existe localmente
                const opcoesExistentes = Array.from(select.options).map(opt => opt.value.toLowerCase());
                if (opcoesExistentes.includes(opcaoFormatada)) {
                    alert('⚠️ Esta opção já existe!');
                    return;
                }
                
                try {
                    // Salvar no backend
                    const response = await fetch(`/api/opcoes/${campo}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ novaOpcao: opcaoFormatada })
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        // Criar nova opção
                        const novaOption = document.createElement('option');
                        novaOption.value = opcaoFormatada;
                        novaOption.textContent = formatarTexto(opcaoFormatada);
                        
                        // Inserir antes da opção "Adicionar nova"
                        const addOption = select.querySelector('option[value="_add_new_"]');
                        select.insertBefore(novaOption, addOption);
                        
                        // Selecionar a nova opção
                        select.value = opcaoFormatada;
                        
                        // Disparar evento change
                        select.dispatchEvent(new Event('change'));
                        
                        alert('✅ Opção adicionada com sucesso!');
                    } else {
                        alert('❌ Erro ao adicionar opção: ' + result.message);
                    }
                    
                } catch (error) {
                    console.error('Erro ao adicionar opção:', error);
                    
                    // Fallback: adicionar localmente mesmo com erro no backend
                    const novaOption = document.createElement('option');
                    novaOption.value = opcaoFormatada;
                    novaOption.textContent = formatarTexto(opcaoFormatada);
                    
                    const addOption = select.querySelector('option[value="_add_new_"]');
                    select.insertBefore(novaOption, addOption);
                    select.value = opcaoFormatada;
                    select.dispatchEvent(new Event('change'));
                    
                    alert('✅ Opção adicionada localmente!');
                }
            }
        
            // Event listener para os selects
            function configurarEventos() {
                document.querySelectorAll('.dynamic-select').forEach(select => {
                    select.addEventListener('change', function() {
                        if (this.value === '_add_new_') {
                            const campo = this.dataset.campo;
                            adicionarNovaOpcao(this, campo);
                        }
                    });
                });
            }
        
            // Validação do formulário
            const form = document.querySelector('.product-form');
            form.addEventListener('submit', function(e) {
                // Verificar se algum select tem a opção "Adicionar nova" selecionada
                const invalidSelects = document.querySelectorAll('.dynamic-select[value="_add_new_"]');
                
                if (invalidSelects.length > 0) {
                    e.preventDefault();
                    alert('❌ Por favor, selecione uma opção válida ou adicione uma nova opção.');
                    invalidSelects[0].focus();
                    return;
                }
        
                // Validação de quantidade vs estoque mínimo
                const quantity = document.getElementById('stockQuantity').value;
                const minStock = document.getElementById('minStock').value;
                
                if (minStock && parseInt(quantity) < parseInt(minStock)) {
                    e.preventDefault();
                    alert('A quantidade em estoque não pode ser menor que o estoque mínimo!');
                    return;
                }
                
                // Verificar campos obrigatórios
                const requiredFields = form.querySelectorAll('[required]');
                let isValid = true;
                
                requiredFields.forEach(field => {
                    if (!field.value.trim()) {
                        isValid = false;
                        field.classList.add('is-invalid');
                    } else {
                        field.classList.remove('is-invalid');
                    }
                });
                
                if (!isValid) {
                    e.preventDefault();
                    alert('Por favor, preencha todos os campos obrigatórios.');
                }
            });
        
            // Inicializar
            carregarOpcoes().then(() => {
                configurarEventos();
                console.log('Sistema de selects dinâmicos carregado para edição');
            });
        
            // Adicionar estilos
            const style = document.createElement('style');
            style.textContent = `
                .dynamic-select option[value="_add_new_"] {
                    background-color: #f8f9fa;
                    border-top: 1px solid #dee2e6;
                    margin-top: 5px;
                    padding-top: 5px;
                    font-weight: bold;
                }
                
                .dynamic-select:focus {
                    border-color: #4361ee;
                    box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.15);
                }
                
                .form-select {
                    cursor: pointer;
                }
                
                .is-invalid {
                    border-color: #e53e3e !important;
                    box-shadow: 0 0 0 3px rgba(229, 62, 62, 0.15) !important;
                }
            `;
            document.head.appendChild(style);
        });
    </script>
</body>
</html>