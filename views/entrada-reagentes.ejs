<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <%- include('./partials/head'); %>
    <style>
        :root {
            --primary: #000000;
            --secondary: #000000;
            --success: #000000;
            --warning: #3b3b3b;
            --info: #353535;
            --light: #f8f9fa;
            --dark: #212529;
            --gray: #6c757d;
            --light-gray: #e9ecef;
        }
        
        body {
            background-color: #f5f7fb;
            color: #333;
            min-height: 100vh;
        }
        
        .main-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 1.5rem;
        }
        
        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }
        
        .section-title {
            font-size: 1.75rem;
            font-weight: 700;
            color: #2d3748;
        }
        
        .card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            overflow: hidden;
            margin-bottom: 2rem;
            transition: all 0.3s ease;
        }
        
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.12);
        }
        
        .card-header {
            padding: 1.25rem 1.5rem;
            border-bottom: 1px solid #e2e8f0;
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        }
        
        .card-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: #2d3748;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .primary-btn {
            background: linear-gradient(135deg, #4e54c8 0%, #8f94fb 100%);
            color: white;
            border: none;
            border-radius: 8px;
            padding: 0.7rem 1.2rem;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px rgba(78, 84, 200, 0.2);
            text-decoration: none;
        }
        
        .primary-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(78, 84, 200, 0.3);
        }
        
        .danger-btn {
            background: linear-gradient(135deg, #3c6288 0%, #2063a7 100%);
            color: white;
            border: none;
            border-radius: 8px;
            padding: 0.7rem 1.2rem;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px rgba(231, 76, 60, 0.2);
        }
        
        .danger-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(231, 76, 60, 0.3);
        }
        
        /* BOTÃO DE SUCESSO PARA ENTRADA */
        .btn-success {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white;
            border: none;
            border-radius: 8px;
            padding: 1rem 2rem;
            font-weight: 600;
            font-size: 1.1rem;
            display: flex;
            align-items: center;
            gap: 0.75rem;
            transition: all 0.3s ease;
            box-shadow: 0 4px 12px rgba(40, 167, 69, 0.3);
            width: 100%;
            justify-content: center;
        }
        
        .btn-success:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(40, 167, 69, 0.4);
            background: linear-gradient(135deg, #218838 0%, #1e7e34 100%);
        }
        
        .form-control, .form-select {
            padding: 0.75rem 1rem;
            border-radius: 8px;
            margin-bottom: 1.2rem;
            border: 1px solid #d1d3e2;
            width: 100%;
        }
        
        .form-label {
            font-weight: 600;
            color: var(--dark);
            margin-bottom: 0.5rem;
            display: block;
        }
        
        .required-field::after {
            content: " *";
            color: #2b1a18;
        }
        
        .input-group {
            display: flex;
        }
        
        .input-group .form-control {
            margin-bottom: 0;
            border-top-right-radius: 0;
            border-bottom-right-radius: 0;
        }
        
        .input-group-text {
            background-color: #f8f9fa;
            border: 1px solid #d1d3e2;
            border-left: none;
            padding: 0.75rem 1rem;
            border-top-right-radius: 8px;
            border-bottom-right-radius: 8px;
            color: #6c757d;
        }
        
        .alert {
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
        }
        
        .alert-warning {
            background-color: rgba(255, 193, 7, 0.15);
            border-left: 4px solid #ffc107;
            color: #856404;
        }
        
        /* ESTILOS PARA ESTATÍSTICAS DE ENTRADA */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 1rem;
            margin-bottom: 1.5rem;
        }
        
        .stat-card {
            background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
            border-radius: 10px;
            padding: 1.25rem;
            text-align: center;
            border: 1px solid #e2e8f0;
            transition: all 0.3s ease;
        }
        
        .stat-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);
        }
        
        .stat-icon {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 0.75rem;
            font-size: 1.25rem;
        }
        
        .stat-today .stat-icon { 
            background: linear-gradient(135deg, #28a745, #20c997); 
            color: white; 
        }
        
        .stat-week .stat-icon { 
            background: linear-gradient(135deg, #17a2b8, #138496); 
            color: white; 
        }
        
        .stat-month .stat-icon { 
            background: linear-gradient(135deg, #6f42c1, #5a2d9c); 
            color: white; 
        }
        
        .stat-value {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 0.25rem;
        }
        
        .stat-today .stat-value { color: #28a745; }
        .stat-week .stat-value { color: #17a2b8; }
        .stat-month .stat-value { color: #6f42c1; }
        
        .stat-label {
            color: #6c757d;
            font-weight: 500;
            font-size: 0.85rem;
        }
        
        /* ESTILOS PARA FORNECEDORES */
        .supplier-stat {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0.875rem;
            background: #f8f9fa;
            border-radius: 8px;
            margin-bottom: 0.5rem;
            transition: all 0.3s ease;
            border: 1px solid #e9ecef;
        }
        
        .supplier-stat:hover {
            background: #e9ecef;
            transform: translateX(3px);
        }
        
        .supplier-info {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            flex: 1;
        }
        
        .supplier-color {
            width: 10px;
            height: 10px;
            border-radius: 50%;
        }
        
        .supplier-name {
            font-weight: 600;
            color: #2d3748;
            font-size: 0.9rem;
        }
        
        .supplier-count {
            font-weight: 700;
            font-size: 1rem;
            color: #28a745;
        }
        
        /* ESTILOS PARA CARDS DE INFORMAÇÃO */
        .info-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
        }
        
        .info-card {
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            border-radius: 10px;
            padding: 1.25rem;
            border: 1px solid #dee2e6;
        }
        
        .info-card.warning {
            background: linear-gradient(135deg, #fff3cd, #ffeaa7);
            border: 1px solid #ffd351;
        }
        
        .info-card.danger {
            background: linear-gradient(135deg, #f8d7da, #f1aeb5);
            border: 1px solid #ea868f;
        }
        
        .movement-list {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        
        .movement-item {
            display: flex;
            align-items: center;
            padding: 1rem;
            border-bottom: 1px solid #e3e6f0;
            transition: background-color 0.3s;
        }
        
        .movement-item:hover {
            background-color: #f8f9fc;
        }
        
        .movement-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 1rem;
            flex-shrink: 0;
        }
        
        .movement-in {
            background-color: rgba(52, 168, 83, 0.2);
            color: #28a745;
        }
        
        .movement-out {
            background-color: rgba(231, 74, 59, 0.2);
            color: #e74c3c;
        }
        
        .movement-content {
            flex-grow: 1;
        }
        
        .movement-title {
            font-weight: 600;
            margin: 0 0 0.25rem 0;
            color: var(--dark);
        }
        
        .movement-details {
            display: flex;
            gap: 15px;
        }
        
        .movement-quantity, .movement-date {
            font-size: 0.85rem;
            color: #6e707e;
        }
        
        .stats-info {
            font-size: 0.85rem;
            color: #6c757d;
            display: flex;
            align-items: center;
            gap: 5px;
        }
        
        .view-all-btn {
            background: transparent;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 0.6rem 1.2rem;
            font-size: 0.9rem;
            color: var(--primary);
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            text-decoration: none;
        }
        
        .view-all-btn:hover {
            background: var(--primary);
            color: white;
            border-color: var(--primary);
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(67, 97, 238, 0.2);
        }
        
        .toast-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
        }
        
        @media (max-width: 768px) {
            .main-container {
                padding: 1rem;
            }
            
            .section-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }
            
            .card-header {
                flex-direction: column;
                gap: 1rem;
                align-items: flex-start;
            }
            
            .movement-details {
                flex-direction: column;
                gap: 5px;
            }
            
            .stats-grid {
                grid-template-columns: 1fr;
                gap: 0.75rem;
            }
            
            .info-grid {
                grid-template-columns: 1fr;
                gap: 0.75rem;
            }
        }

        /* Estilos para o modal de entradas */
.modal-xl {
    max-width: 1200px;
}

.smaller {
    font-size: 0.75rem;
}

.table-responsive {
    max-height: 500px;
    overflow-y: auto;
}

.page-item.active .page-link {
    background-color: #28a745;
    border-color: #28a745;
}

.page-link {
    color: #28a745;
}

.page-link:hover {
    color: #218838;
}

/* Estilos para upload de PDF */
.pdf-upload-section {
    margin-top: 1rem;
    padding: 1rem;
    background-color: #f8f9fa;
    border-radius: 8px;
    border: 1px dashed #dee2e6;
}

.pdf-upload-header {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 1rem;
}

.pdf-upload-title {
    font-weight: 600;
    color: #2d3748;
    font-size: 1rem;
}

.pdf-upload-area {
    border: 2px dashed #28a745;
    border-radius: 8px;
    padding: 2rem;
    text-align: center;
    background-color: white;
    cursor: pointer;
    transition: all 0.3s ease;
    margin-bottom: 1rem;
}

.pdf-upload-area:hover {
    background-color: #f0fff4;
    border-color: #218838;
}

.pdf-upload-area.dragover {
    background-color: #e3f2fd;
    border-color: #1976d2;
}

.pdf-icon {
    font-size: 3rem;
    color: #e53e3e;
    margin-bottom: 1rem;
}

.pdf-upload-text {
    color: #4a5568;
    margin-bottom: 0.5rem;
}

.pdf-upload-hint {
    color: #718096;
    font-size: 0.875rem;
}

.pdf-file-input {
    display: none;
}

.pdf-preview {
    margin-top: 1rem;
    display: none;
}

.pdf-preview-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0.75rem;
    background-color: white;
    border: 1px solid #e2e8f0;
    border-radius: 6px;
    margin-bottom: 0.5rem;
}

.pdf-preview-info {
    display: flex;
    align-items: center;
    gap: 0.75rem;
}

.pdf-preview-icon {
    color: #e53e3e;
    font-size: 1.5rem;
}

.pdf-preview-details {
    display: flex;
    flex-direction: column;
}

.pdf-preview-name {
    font-weight: 500;
    color: #2d3748;
}

.pdf-preview-size {
    font-size: 0.875rem;
    color: #718096;
}

.pdf-remove-btn {
    background: none;
    border: none;
    color: #e53e3e;
    cursor: pointer;
    padding: 0.25rem;
    border-radius: 4px;
    transition: background-color 0.2s;
}

.pdf-remove-btn:hover {
    background-color: #fed7d7;
}

.btn-outline-primary {
    background-color: transparent;
    border: 2px solid #28a745;
    color: #28a745;
    padding: 0.5rem 1rem;
    border-radius: 8px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
}

.btn-outline-primary:hover {
    background-color: #28a745;
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(40, 167, 69, 0.3);
}

/* Estilos para produtos vencidos */
.produto-vencido {
    border-left: 4px solid #dc3545 !important;
    background-color: #fff5f5 !important;
}

.produto-proximo-vencer {
    border-left: 4px solid #ffc107 !important;
    background-color: #fffbf0 !important;
}

.badge-vencido {
    background-color: #dc3545;
}

.badge-proximo-vencer {
    background-color: #ffc107;
    color: #000;
}

/* Estilos para o modal de renovação */
.modal-renovacao .modal-header {
    background: linear-gradient(135deg, #fff3cd, #ffeaa7);
    border-bottom: 1px solid #ffd351;
}

/* Destaque para campos com data vencida */
.input-data-vencida {
    border-color: #dc3545 !important;
    background-color: #fff5f5 !important;
}
    </style>
</head>
<body class="flex">
    <%- include('./partials/header'); %>
    
    <!-- Conteúdo Principal -->
    <main class="flex-1 overflow-auto bg-gray-50 min-h-screen">
        <div class="main-container">
            <!-- Header da Página -->
            <div class="section-header">
                <h1 class="section-title">
                    <i class="fas fa-sign-in-alt text-success mr-2"></i>
                    Entrada de Reagentes
                </h1>
            </div>
            
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <!-- Formulário de Entrada -->
                <div>
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">
                                <i class="fas fa-file-import text-success"></i>
                                Registrar Entrada de Reagente
                            </h2>
                        </div>
                        <div class="p-6">
                            <form id="input-form" enctype="multipart/form-data">
                                <div class="mb-4">
                                    <label for="reagent" class="form-label required-field">Reagente</label>
                                    <input type="text" class="form-control" id="reagent" name="reagent" required 
                                        placeholder="Digite o nome do reagente..." list="reagents-list"
                                        autocomplete="off">
                                    <datalist id="reagents-list">
                                        <% produtos.forEach(produto => { %>
                                            <option value="<%= produto.nome %>" 
                                                    data-id="<%= produto.id_produto %>"
                                                    data-unit="<%= produto.unidade_medida %>"
                                                    data-stock="<%= produto.quantidade %>">
                                                <%= produto.nome %> - Estoque: <%= formatarNumero(produto.quantidade) %> <%= produto.unidade_medida %>
                                            </option>
                                        <% }); %>
                                    </datalist>
                                    <small class="form-text text-muted" id="reagent-info">
                                        Comece a digitar o nome do reagente e selecione da lista
                                    </small>
                                    <input type="hidden" id="reagent-id" name="reagent-id">
                                </div>
                                
                                <div class="mb-4">
                                    <label for="quantity" class="form-label required-field">Quantidade de Entrada</label>
                                    <div class="input-group">
                                        <input type="number" class="form-control" id="quantity" name="quantity" 
                                               min="0.1" step="0.1" required placeholder="Ex: 5.0">
                                        <span class="input-group-text" id="unit-measure">unidade</span>
                                    </div>
                                    <small class="form-text text-muted" id="quantity-info">
                                        Digite a quantidade que está entrando no estoque
                                    </small>
                                </div>
                                
                                <div class="mb-4">
                                    <label for="responsible" class="form-label required-field">Responsável</label>
                                    <input type="text" class="form-control" id="responsible" name="responsible" 
                                           required placeholder="Digite seu nome completo">
                                </div>
                                
                                <div class="mb-4">
                                    <label for="supplier" class="form-label">Fornecedor</label>
                                    <input type="text" class="form-control" id="supplier" name="supplier" 
                                           placeholder="Digite o nome do fornecedor">
                                </div>
                                
                                <div class="mb-4">
                                    <label for="purchaseDate" class="form-label">Data da Compra</label>
                                    <input type="date" class="form-control" id="purchaseDate" name="purchaseDate">
                                </div>
                            
                                <div class="mb-4">
                                    <label for="expirationDate" class="form-label">Data de Vencimento</label>
                                    <input type="date" class="form-control" id="expirationDate" name="expirationDate">
                                </div>
                                
                                <div class="mb-4">
                                    <label for="notes" class="form-label">Observações</label>
                                    <textarea class="form-control" id="notes" name="notes" rows="3" 
                                              placeholder="Observações adicionais sobre a entrada..."></textarea>
                                    
                                    <!-- Seção de Upload de PDF -->
                                    <div class="pdf-upload-section">
                                        <div class="pdf-upload-header">
                                            <i class="fas fa-file-pdf"></i>
                                            <span class="pdf-upload-title">Documentos em PDF</span>
                                        </div>
                                        
                                        <div class="pdf-upload-area" id="pdfUploadArea">
                                            <div class="pdf-icon">
                                                <i class="fas fa-file-pdf"></i>
                                            </div>
                                            <div class="pdf-upload-text">
                                                Clique para adicionar ou arraste arquivos PDF aqui
                                            </div>
                                            <div class="pdf-upload-hint">
                                                Tamanho máximo: 10MB por arquivo
                                            </div>
                                            <input type="file" class="pdf-file-input" id="pdfFiles" name="pdfFiles" accept=".pdf" multiple>
                                        </div>
                                        
                                        <button type="button" class="btn-outline-primary" onclick="document.getElementById('pdfFiles').click()">
                                            <i class="fas fa-plus"></i> Selecionar PDFs
                                        </button>
                                        
                                        <div class="pdf-preview" id="pdfPreview">
                                            <!-- Os arquivos PDF selecionados serão exibidos aqui -->
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="d-grid">
                                    <button type="submit" class="btn-success">
                                        <i class="fas fa-paper-plane me-2"></i>Registrar Entrada
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
                
                <!-- Últimas Movimentações e Estatísticas -->
                <div>
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">
                                <i class="fas fa-exchange-alt"></i>
                                Últimas Movimentações
                            </h2>
                            <button class="view-all-btn" id="view-all-inputs">
                                <i class="fas fa-list"></i> Ver todas
                            </button>
                        </div>
                        
                        <ul class="movement-list" id="input-movements-list">
                            <!-- As movimentações serão carregadas via JavaScript -->
                        </ul>
                        
                        <div class="card-footer p-4 bg-gray-50 border-t">
                            <span class="stats-info">
                                <i class="fas fa-history"></i>
                                <span id="last-update">Atualizado há 5 minutos</span>
                            </span>
                        </div>
                    </div>
                    
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">
                                <i class="fas fa-chart-bar text-success"></i>
                                Estatísticas de Entrada
                            </h2>
                        </div>
                        <div class="p-6">
                            <div class="grid grid-cols-3 text-center mb-4">
                                <div class="border-r">
                                    <h4 class="text-success text-2xl font-bold" id="today-inputs">0</h4>
                                    <p class="text-muted mb-0 text-sm">Entradas hoje</p>
                                </div>
                                <div class="border-r">
                                    <h4 class="text-success text-2xl font-bold" id="week-inputs">0</h4>
                                    <p class="text-muted mb-0 text-sm">Entradas semana</p>
                                </div>
                                <div>
                                    <h4 class="text-success text-2xl font-bold" id="month-inputs">0</h4>
                                    <p class="text-muted mb-0 text-sm">Entradas mês</p>
                                </div>
                            </div>
                            
                            <div class="mt-4">
                                <h6 class="font-semibold mb-3"></h6>
                                <div id="suppliers-stats">
                                    <!-- As estatísticas serão carregadas via JavaScript -->
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Informações Importantes -->
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">
                                <i class="fas fa-info-circle"></i>
                                Informações Importantes
                            </h2>
                        </div>
                        <div class="p-6">
                            <div class="alert alert-warning">
                                <h6 class="font-semibold"><i class="fas fa-exclamation-triangle me-2"></i>Antes de registrar a entrada:</h6>
                                <ul class="mb-0 mt-2 ps-4">
                                    <li>Verifique a qualidade do reagente recebido</li>
                                    <li>Confirme a identificação do produto</li>
                                    <li>Registre o fornecedor e data de compra</li>
                                    <li>Anexe documentos importantes em PDF quando necessário</li>
                                </ul>
                            </div>
                            
                            <div class="flex items-center mt-4">
                                <div class="flex-shrink-0 bg-success bg-opacity-10 p-3 rounded">
                                    <i class="fas fa-database fa-lg text-success"></i>
                                </div>
                                <div class="flex-grow-1 ms-3">
                                    <h6 class="font-semibold mb-0">Status do Estoque</h6>
                                    <p class="text-muted mb-0">
                                        <span id="low-stock-items">0</span> produtos com estoque baixo | 
                                        <span id="out-of-stock-items">0</span> produtos esgotados
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>


    <!-- Container para Notificações -->
    <div class="toast-container"></div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
// Variável para armazenar os produtos
let produtosData = [];

// Carregar dados dos produtos
function carregarProdutos() {
    produtosData = [
        <% produtos.forEach(produto => { %>
        {
            id: <%= produto.id_produto %>,
            nome: '<%= produto.nome %>',
            unidade: '<%= produto.unidade_medida %>',
            estoque: <%= produto.quantidade %>,
            tipo: '<%= produto.tipo %>'
        },
        <% }); %>
    ];
    console.log(`📦 ${produtosData.length} produtos carregados`);
}

// Buscar produto pelo nome
function buscarProdutoPorNome(nome) {
    return produtosData.find(produto => 
        produto.nome.toLowerCase() === nome.toLowerCase()
    );
}

// Função para formatar números no JavaScript
function formatarNumeroJS(num) {
    if (num === null || num === undefined || num === '') return '0,0';
    const numero = parseFloat(num);
    if (isNaN(numero)) return '0,0';
    return numero.toFixed(1).replace('.', ',');
}

// Função para exibir notificações no novo estilo
function showToast(message, type = 'success') {
    const notification = document.createElement('div');
    
    // Mapear tipos para ícones
    let icon = 'info';
    if (type === 'success') icon = 'check';
    if (type === 'danger') icon = 'exclamation-triangle';
    if (type === 'warning') icon = 'exclamation-circle';
    
    notification.className = `notification ${type}`;
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 1rem 1.5rem;
        border-radius: 8px;
        color: white;
        font-weight: 500;
        z-index: 9999;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        animation: slideIn 0.3s ease-out;
        max-width: 400px;
        background: ${type === 'success' ? '#28a745' : 
                     type === 'danger' ? '#dc3545' : 
                     type === 'warning' ? '#ffc107' : '#17a2b8'};
    `;
    
    notification.innerHTML = `
        <div style="display: flex; align-items: center; gap: 0.5rem;">
            <i class="fas fa-${icon}" style="font-size: 1.1rem;"></i>
            <span>${message}</span>
        </div>
    `;

    document.body.appendChild(notification);

    // Adicionar animação de entrada
    const style = document.createElement('style');
    style.textContent = `
        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }
        @keyframes slideOut {
            from {
                transform: translateX(0);
                opacity: 1;
            }
            to {
                transform: translateX(100%);
                opacity: 0;
            }
        }
    `;
    document.head.appendChild(style);

    setTimeout(() => {
        notification.style.animation = 'slideOut 0.3s ease-in forwards';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
            if (style.parentNode) {
                style.parentNode.removeChild(style);
            }
        }, 300);
    }, 4000);
}

// Funções para upload de PDF
function configurarUploadPDF() {
    const pdfUploadArea = document.getElementById('pdfUploadArea');
    const pdfFileInput = document.getElementById('pdfFiles');
    const pdfPreview = document.getElementById('pdfPreview');

    // Clique na área de upload
    pdfUploadArea.addEventListener('click', function() {
        pdfFileInput.click();
    });

    // Arrastar e soltar
    pdfUploadArea.addEventListener('dragover', function(e) {
        e.preventDefault();
        pdfUploadArea.classList.add('dragover');
    });

    pdfUploadArea.addEventListener('dragleave', function() {
        pdfUploadArea.classList.remove('dragover');
    });

    pdfUploadArea.addEventListener('drop', function(e) {
        e.preventDefault();
        pdfUploadArea.classList.remove('dragover');
        
        const files = e.dataTransfer.files;
        handlePdfFiles(files);
    });

    // Seleção de arquivos via input
    pdfFileInput.addEventListener('change', function() {
        handlePdfFiles(this.files);
    });

    // Função para processar arquivos PDF
    function handlePdfFiles(files) {
        const maxSize = 10 * 1024 * 1024; // 10MB

        for (let file of files) {
            // Verificar se é PDF
            if (file.type !== 'application/pdf') {
                alert('❌ Apenas arquivos PDF são permitidos.');
                continue;
            }

            // Verificar tamanho
            if (file.size > maxSize) {
                alert(`❌ O arquivo ${file.name} é muito grande. Tamanho máximo: 10MB.`);
                continue;
            }

            // Adicionar à preview
            addPdfPreview(file);
        }

        // Atualizar preview
        updatePreviewVisibility();
    }

    // Adicionar preview do PDF
    function addPdfPreview(file) {
        const previewItem = document.createElement('div');
        previewItem.className = 'pdf-preview-item';
        
        previewItem.innerHTML = `
            <div class="pdf-preview-info">
                <i class="fas fa-file-pdf pdf-preview-icon"></i>
                <div class="pdf-preview-details">
                    <span class="pdf-preview-name">${file.name}</span>
                    <span class="pdf-preview-size">${formatFileSize(file.size)}</span>
                </div>
            </div>
            <button type="button" class="pdf-remove-btn" onclick="removePdfPreview(this)">
                <i class="fas fa-times"></i>
            </button>
        `;

        pdfPreview.appendChild(previewItem);
    }

    // Remover preview do PDF
    window.removePdfPreview = function(button) {
        const previewItem = button.closest('.pdf-preview-item');
        previewItem.remove();
        updatePreviewVisibility();
    };

    // Atualizar visibilidade da área de preview
    function updatePreviewVisibility() {
        if (pdfPreview.children.length > 0) {
            pdfPreview.style.display = 'block';
        } else {
            pdfPreview.style.display = 'none';
        }
    }

    // Formatador de tamanho de arquivo
    function formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
}

// Atualizar informações quando o usuário digitar ou selecionar um reagente
function atualizarInformacoesProduto() {
    const reagentInput = document.getElementById('reagent');
    const unitMeasure = document.getElementById('unit-measure');
    const reagentInfo = document.getElementById('reagent-info');
    const quantityInput = document.getElementById('quantity');
    const reagentIdInput = document.getElementById('reagent-id');
    
    const produto = buscarProdutoPorNome(reagentInput.value);
    
    if (produto) {
        // Produto encontrado
        unitMeasure.textContent = produto.unidade;
        reagentInfo.innerHTML = `
            <strong>Estoque atual:</strong> ${formatarNumeroJS(produto.estoque)} ${produto.unidade}
            ${produto.estoque <= 5 ? '<span class="text-danger font-bold"> ⚠️ BAIXO ESTOQUE - REPOSIÇÃO NECESSÁRIA</span>' : ''}
        `;
        
        // Atualizar o placeholder do input de quantidade
        quantityInput.placeholder = `Ex: 5.0`;
        
        // Preencher o campo hidden com o ID do produto
        reagentIdInput.value = produto.id;
        
        // Adicionar classe de validação visual
        reagentInput.classList.add('is-valid');
        reagentInput.classList.remove('is-invalid');
    } else {
        // Produto não encontrado ou campo vazio
        unitMeasure.textContent = 'unidade';
        reagentInfo.textContent = reagentInput.value ? 'Reagente não encontrado' : 'Digite o nome do reagente';
        reagentInfo.className = 'form-text ' + (reagentInput.value ? 'text-danger' : 'text-muted');
        quantityInput.placeholder = 'Ex: 5.0';
        reagentIdInput.value = '';
        
        // Adicionar classe de erro visual se houver texto mas não encontrado
        if (reagentInput.value) {
            reagentInput.classList.add('is-invalid');
            reagentInput.classList.remove('is-valid');
        } else {
            reagentInput.classList.remove('is-valid', 'is-invalid');
        }
    }
}

// Envio do formulário de entrada
function configurarEnvioFormularioEntrada() {
    const form = document.getElementById('input-form');
    if (!form) {
        console.log('Formulário de entrada não encontrado');
        return;
    }

    form.addEventListener('submit', async function(event) {
        event.preventDefault();
        
        const submitBtn = this.querySelector('button[type="submit"]');
        const originalText = submitBtn.innerHTML;
        const reagentInput = document.getElementById('reagent');
        const reagentIdInput = document.getElementById('reagent-id');
        
        // Validar se o reagente foi encontrado
        if (!reagentIdInput.value) {
            showToast('❌ Por favor, selecione um reagente válido da lista', 'danger');
            reagentInput.focus();
            return;
        }
        
        // Validar quantidade
        const quantityInput = document.getElementById('quantity');
        const quantity = parseFloat(quantityInput.value);
        if (!quantity || quantity <= 0) {
            showToast('❌ Por favor, informe uma quantidade válida', 'danger');
            quantityInput.focus();
            return;
        }
        
        // Mostrar loading
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Registrando...';
        submitBtn.disabled = true;
        
        const formData = new FormData(this);
        const data = {
            reagent: reagentIdInput.value, // Usar o ID do produto
            quantity: formData.get('quantity'),
            responsible: formData.get('responsible'),
            supplier: formData.get('supplier'),
            purchaseDate: formData.get('purchaseDate'),
            expirationDate: formData.get('expirationDate'),
            notes: formData.get('notes')
        };
        
        console.log('Enviando dados de entrada:', data);
        
        try {
            const response = await fetch('/api/input', {
                method: 'POST',
                body: formData // Usar FormData para enviar arquivos
            });
            
            const result = await response.json();
            console.log('Resposta do servidor:', result);
            
            if (result.success) {
                const reagentName = document.getElementById('reagent').value;
                const quantity = document.getElementById('quantity').value;
                const unit = document.getElementById('unit-measure').textContent;
                
                showToast(`Entrada de ${quantity} ${unit} de ${reagentName} registrada com sucesso! Estoque atualizado.`, 'success');
                this.reset();
                document.getElementById('reagent-id').value = '';
                
                // Limpar preview de PDFs
                const pdfPreview = document.getElementById('pdfPreview');
                pdfPreview.innerHTML = '';
                pdfPreview.style.display = 'none';
                
                // Limpar validação visual do campo de reagente
                reagentInput.classList.remove('is-valid', 'is-invalid');
                
                // Recarregar as movimentações e estatísticas
                await loadInputMovements();
                await loadInputStatistics();
                
                // Recarregar a página para atualizar a lista de produtos
                setTimeout(() => {
                    window.location.reload();
                }, 2000);
                
            } else {
                showToast(result.message, 'danger');
            }
        } catch (error) {
            console.error('Erro ao registrar entrada:', error);
            showToast('Erro de conexão. Tente novamente.', 'danger');
        } finally {
            // Restaurar botão
            submitBtn.innerHTML = originalText;
            submitBtn.disabled = false;
        }
    });
}

// Função para carregar as movimentações de ENTRADA (4 últimas)
async function loadInputMovements() {
    try {
        console.log('🔄 Carregando últimas 4 entradas...');
        
        const response = await fetch('/api/input-movements');
        const movements = await response.json();
        
        const movementsList = document.getElementById('input-movements-list');
        if (!movementsList) {
            console.log('Elemento input-movements-list não encontrado');
            return;
        }
        
        movementsList.innerHTML = '';
        
        console.log('Últimas entradas recebidas:', movements);
        
        if (!movements || movements.length === 0) {
            movementsList.innerHTML = `
                <li class="movement-item text-center text-muted py-4">
                    <i class="fas fa-inbox fa-2x mb-2"></i>
                    <p>Nenhuma entrada registrada</p>
                    <small class="text-muted">As entradas aparecerão aqui quando forem registradas</small>
                </li>
            `;
            return;
        }
        
        movements.forEach(movement => {
            const movementItem = document.createElement('li');
            movementItem.className = 'movement-item';
            
            const date = new Date(movement.date);
            const formattedDate = date.toLocaleDateString('pt-BR') + ' ' + date.toLocaleTimeString('pt-BR', {hour: '2-digit', minute: '2-digit'});
            
            movementItem.innerHTML = `
                <div class="movement-icon movement-in">
                    <i class="fas fa-arrow-down"></i>
                </div>
                <div class="movement-content">
                    <p class="movement-title">Entrada - ${movement.reagent}</p>
                    <div class="movement-details">
                        <span class="movement-quantity"><strong>${movement.quantity} ${movement.unit}</strong></span>
                        <span class="movement-date">${formattedDate}</span>
                        <span class="movement-responsible">por ${movement.responsible}</span>
                    </div>
                    ${movement.supplier ? `<small class="text-muted">Fornecedor: ${movement.supplier}</small>` : ''}
                </div>
            `;
            
            movementsList.appendChild(movementItem);
        });
        
        // Atualizar o timestamp da última atualização
        const lastUpdateElement = document.getElementById('last-update');
        if (lastUpdateElement) {
            lastUpdateElement.textContent = `Atualizado às ${new Date().toLocaleTimeString('pt-BR', {hour: '2-digit', minute: '2-digit'})}`;
        }
        
    } catch (error) {
        console.error('Erro ao carregar entradas:', error);
        const movementsList = document.getElementById('input-movements-list');
        if (movementsList) {
            movementsList.innerHTML = `
                <li class="movement-item text-center text-danger py-4">
                    <i class="fas fa-exclamation-triangle fa-2x mb-2"></i>
                    <p>Erro ao carregar entradas</p>
                    <small class="text-muted">${error.message}</small>
                </li>
            `;
        }
    }
}

// Função para carregar estatísticas de entrada
async function loadInputStatistics() {
    try {
        console.log('📊 Carregando estatísticas de entrada...');
        
        const response = await fetch('/api/input-statistics');
        if (!response.ok) {
            throw new Error(`Erro HTTP: ${response.status}`);
        }
        
        const stats = await response.json();
        console.log('📈 Estatísticas recebidas:', stats);
        
        // Atualizar contadores
        const todayInputsElement = document.getElementById('today-inputs');
        const weekInputsElement = document.getElementById('week-inputs');
        const monthInputsElement = document.getElementById('month-inputs');
        const lowStockItemsElement = document.getElementById('low-stock-items');
        const outOfStockItemsElement = document.getElementById('out-of-stock-items');
        
        if (todayInputsElement) todayInputsElement.textContent = stats.todayInputs || 0;
        if (weekInputsElement) weekInputsElement.textContent = stats.weekInputs || 0;
        if (monthInputsElement) monthInputsElement.textContent = stats.monthInputs || 0;
        if (lowStockItemsElement) lowStockItemsElement.textContent = stats.lowStockItems || 0;
        if (outOfStockItemsElement) outOfStockItemsElement.textContent = stats.outOfStockItems || 0;
        
        // Atualizar estatísticas de fornecedores
        const suppliersStats = document.getElementById('suppliers-stats');
        if (suppliersStats) {
            suppliersStats.innerHTML = '';
            
            if (!stats.recentSuppliers || stats.recentSuppliers.length === 0) {
                suppliersStats.innerHTML = '<p class="text-muted text-center">Nenhum dado disponível</p>';
                return;
            }
            
            // Aqui você pode adicionar a lógica para exibir os fornecedores
            // se necessário no futuro
        }
    } catch (error) {
        console.error('❌ Erro ao carregar estatísticas de entrada:', error);
        
        // Valores padrão em caso de erro
        const todayInputsElement = document.getElementById('today-inputs');
        const weekInputsElement = document.getElementById('week-inputs');
        const monthInputsElement = document.getElementById('month-inputs');
        const lowStockItemsElement = document.getElementById('low-stock-items');
        const outOfStockItemsElement = document.getElementById('out-of-stock-items');
        
        if (todayInputsElement) todayInputsElement.textContent = '0';
        if (weekInputsElement) weekInputsElement.textContent = '0';
        if (monthInputsElement) monthInputsElement.textContent = '0';
        if (lowStockItemsElement) lowStockItemsElement.textContent = '0';
        if (outOfStockItemsElement) outOfStockItemsElement.textContent = '0';
        
        const suppliersStats = document.getElementById('suppliers-stats');
        if (suppliersStats) {
            suppliersStats.innerHTML = '<p class="text-muted text-center">Erro ao carregar dados</p>';
        }
    }
}

// Configurar event listeners quando o DOM estiver carregado
document.addEventListener('DOMContentLoaded', function() {
    console.log('Página de entradas carregada, inicializando scripts...');
    
    // Carregar produtos
    carregarProdutos();
    
    // Configurar eventos do campo de reagente
    const reagentInput = document.getElementById('reagent');
    if (reagentInput) {
        reagentInput.addEventListener('input', atualizarInformacoesProduto);
        reagentInput.addEventListener('change', atualizarInformacoesProduto);
    }
    
    // Configurar upload de PDF
    configurarUploadPDF();
    
    // Configurar envio do formulário
    configurarEnvioFormularioEntrada();
    
    // Configurar botão para ver todas as movimentações
    const viewAllBtn = document.getElementById('view-all-inputs');
    if (viewAllBtn) {
        viewAllBtn.addEventListener('click', function() {
            window.location.href = '/movimentacoes';
        });
    }
    
    // Carregar dados iniciais
    loadInputMovements();
    loadInputStatistics();
    
    console.log('Scripts de entrada inicializados com sucesso');
    
    // Atualizar a cada 30 segundos
    setInterval(() => {
        loadInputMovements();
        loadInputStatistics();
    }, 30000);
});

// Envio do formulário de entrada (VERSÃO CORRIGIDA)
function configurarEnvioFormularioEntrada() {
    const form = document.getElementById('input-form');
    if (!form) {
        console.log('Formulário de entrada não encontrado');
        return;
    }

    form.addEventListener('submit', async function(event) {
        event.preventDefault();
        
        const submitBtn = this.querySelector('button[type="submit"]');
        const originalText = submitBtn.innerHTML;
        const reagentInput = document.getElementById('reagent');
        const reagentIdInput = document.getElementById('reagent-id');
        
        // Validar se o reagente foi encontrado
        if (!reagentIdInput.value) {
            showToast('❌ Por favor, selecione um reagente válido da lista', 'danger');
            reagentInput.focus();
            return;
        }
        
        // Validar quantidade
        const quantityInput = document.getElementById('quantity');
        const quantity = parseFloat(quantityInput.value);
        if (!quantity || quantity <= 0) {
            showToast('❌ Por favor, informe uma quantidade válida', 'danger');
            quantityInput.focus();
            return;
        }
        
        // Verificar data de validade antes de enviar
        const expirationDateInput = document.getElementById('expirationDate');
        if (expirationDateInput && expirationDateInput.value) {
            const hoje = new Date();
            const dataValidade = new Date(expirationDateInput.value);
            
            if (dataValidade < hoje) {
                const confirmar = confirm('⚠️ A data de validade informada está vencida. Deseja continuar mesmo assim?');
                if (!confirmar) {
                    expirationDateInput.focus();
                    return;
                }
            }
        }
        
        // Mostrar loading
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Registrando...';
        submitBtn.disabled = true;
        
        const formData = new FormData(this);
        
        console.log('📤 Enviando dados para o servidor...');
        
        try {
            const response = await fetch('/api/input', {
                method: 'POST',
                body: formData
            });
            
            const result = await response.json();
            console.log('📨 Resposta do servidor:', result);
            
            if (result.success) {
                const reagentName = document.getElementById('reagent').value;
                const quantity = document.getElementById('quantity').value;
                const unit = document.getElementById('unit-measure').textContent;
                
                showToast(result.message, 'success');
                this.reset();
                document.getElementById('reagent-id').value = '';
                
                // Limpar preview de PDFs
                const pdfPreview = document.getElementById('pdfPreview');
                if (pdfPreview) {
                    pdfPreview.innerHTML = '';
                    pdfPreview.style.display = 'none';
                }
                
                // Limpar validação visual do campo de reagente
                reagentInput.classList.remove('is-valid', 'is-invalid');
                
                // Recarregar as movimentações e estatísticas
                await loadInputMovements();
                await loadInputStatistics();
                
            } else if (result.data_vencida) {
                // Data vencida - mostrar opção para continuar
                const continuar = confirm(result.message + '\n\nDeseja continuar mesmo assim?');
                if (continuar) {
                    // Reenviar ignorando a validação de data
                    formData.append('ignorar_validade', 'true');
                    const response2 = await fetch('/api/input', {
                        method: 'POST',
                        body: formData
                    });
                    const result2 = await response2.json();
                    
                    if (result2.success) {
                        showToast(result2.message, 'success');
                        this.reset();
                        // ... resto do código de sucesso
                    } else {
                        showToast(result2.message, 'danger');
                    }
                }
            } else {
                showToast(result.message, 'danger');
            }
        } catch (error) {
            console.error('🌐 Erro de conexão:', error);
            showToast('❌ Erro de conexão. Verifique sua internet e tente novamente.', 'danger');
        } finally {
            // Restaurar botão
            submitBtn.innerHTML = originalText;
            submitBtn.disabled = false;
        }
    });
}

// Atualizar informações quando o usuário digitar ou selecionar um reagente
function atualizarInformacoesProduto() {
    const reagentInput = document.getElementById('reagent');
    const unitMeasure = document.getElementById('unit-measure');
    const reagentInfo = document.getElementById('reagent-info');
    const quantityInput = document.getElementById('quantity');
    const reagentIdInput = document.getElementById('reagent-id');
    
    console.log('🔄 Atualizando informações do produto...');
    console.log('Valor do input:', reagentInput.value);
    
    const produto = buscarProdutoPorNome(reagentInput.value);
    
    if (produto) {
        // Produto encontrado
        console.log('✅ Produto encontrado:', produto);
        unitMeasure.textContent = produto.unidade;
        reagentInfo.innerHTML = `
            <strong>Estoque atual:</strong> ${formatarNumeroJS(produto.estoque)} ${produto.unidade}
            ${produto.estoque <= 5 ? '<span class="text-danger font-bold"> ⚠️ BAIXO ESTOQUE - REPOSIÇÃO NECESSÁRIA</span>' : ''}
        `;
        
        // Atualizar o placeholder do input de quantidade
        quantityInput.placeholder = `Ex: 5.0`;
        
        // DEFINIR O ID DO PRODUTO NO CAMPO HIDDEN
        reagentIdInput.value = produto.id;
        console.log('✅ ID do produto definido:', produto.id);
        
        // Adicionar classe de validação visual
        reagentInput.classList.add('is-valid');
        reagentInput.classList.remove('is-invalid');
    } else {
        // Produto não encontrado ou campo vazio
        console.log('❌ Produto não encontrado');
        unitMeasure.textContent = 'unidade';
        reagentInfo.textContent = reagentInput.value ? 'Reagente não encontrado' : 'Digite o nome do reagente';
        reagentInfo.className = 'form-text ' + (reagentInput.value ? 'text-danger' : 'text-muted');
        quantityInput.placeholder = 'Ex: 5.0';
        
        // LIMPAR O ID DO PRODUTO
        reagentIdInput.value = '';
        console.log('❌ ID do produto limpo');
        
        // Adicionar classe de erro visual se houver texto mas não encontrado
        if (reagentInput.value) {
            reagentInput.classList.add('is-invalid');
            reagentInput.classList.remove('is-valid');
        } else {
            reagentInput.classList.remove('is-valid', 'is-invalid');
        }
    }
}

// Função para debug dos produtos
function debugProdutos() {
    console.log('📦 Produtos carregados:', produtosData);
    console.log('📦 Total de produtos:', produtosData.length);
    
    // Mostrar os primeiros 5 produtos
    produtosData.slice(0, 5).forEach((produto, index) => {
        console.log(`Produto ${index + 1}:`, produto);
    });
}

// Chame esta função no carregamento da página para verificar
document.addEventListener('DOMContentLoaded', function() {
    // ... código existente ...
    
    // Debug dos produtos
    setTimeout(() => {
        debugProdutos();
    }, 1000);
});
    </script>
</body>
</html>