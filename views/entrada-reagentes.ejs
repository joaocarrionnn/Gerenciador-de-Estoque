<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <%- include('./partials/head'); %>
    <style>
        :root {
            --primary: #2563eb;
            --secondary: #64748b;
            --success: #10b981;
            --warning: #f59e0b;
            --danger: #ef4444;
            --info: #3b82f6;
            --light: #f8fafc;
            --dark: #1e293b;
        }
        
        body {
            background: linear-gradient(135deg, #f5f7fb 0%, #e3e8f0 100%);
            min-height: 100vh;
            font-family: 'Inter', sans-serif;
        }
        
        .main-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 2rem;
        }
        
        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            background: white;
            padding: 1.5rem 2rem;
            border-radius: 16px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            border-left: 6px solid var(--success);
        }
        
        .section-title {
            font-size: 2rem;
            font-weight: 800;
            color: var(--dark);
            display: flex;
            align-items: center;
            gap: 1rem;
        }
        
        .section-title i {
            background: linear-gradient(135deg, var(--success), #059669);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            font-size: 2.5rem;
        }
        
        .card {
            background: white;
            border-radius: 20px;
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);
            border: none;
            overflow: hidden;
            margin-bottom: 2rem;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
        }
        
        .card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(135deg, var(--success), #059669);
        }
        
        .card:hover {
            transform: translateY(-8px);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
        }
        
        .card-header {
            padding: 1.5rem 2rem;
            border-bottom: 1px solid #e2e8f0;
            background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .card-title {
            font-size: 1.4rem;
            font-weight: 700;
            color: var(--dark);
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }
        
        .card-title i {
            color: var(--success);
            font-size: 1.6rem;
        }
        
        .btn-success {
            background: linear-gradient(135deg, var(--success), #059669);
            border: none;
            border-radius: 12px;
            padding: 1rem 2rem;
            font-weight: 600;
            font-size: 1.1rem;
            display: flex;
            align-items: center;
            gap: 0.75rem;
            transition: all 0.3s ease;
            box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
            width: 100%;
            justify-content: center;
        }
        
        .btn-success:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(16, 185, 129, 0.4);
            background: linear-gradient(135deg, #059669, #047857);
        }
        
        .form-control, .form-select {
            padding: 1rem 1.25rem;
            border-radius: 12px;
            border: 2px solid #e2e8f0;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: #f8fafc;
        }
        
        .form-control:focus, .form-select:focus {
            border-color: var(--success);
            box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.1);
            background: white;
        }
        
        .form-label {
            font-weight: 600;
            color: var(--dark);
            margin-bottom: 0.75rem;
            font-size: 1rem;
        }
        
        .required-field::after {
            content: " *";
            color: var(--danger);
        }
        
        .input-group {
            display: flex;
            border-radius: 12px;
            overflow: hidden;
        }
        
        .input-group .form-control {
            margin-bottom: 0;
            border-top-right-radius: 0;
            border-bottom-right-radius: 0;
            border-right: none;
        }
        
        .input-group-text {
            background: linear-gradient(135deg, #f1f5f9, #e2e8f0);
            border: 2px solid #e2e8f0;
            border-left: none;
            padding: 1rem 1.25rem;
            color: var(--dark);
            font-weight: 600;
            min-width: 100px;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 1.5rem;
            margin-bottom: 2rem;
        }
        
        .stat-card {
            background: linear-gradient(135deg, #f8fafc, #f1f5f9);
            border-radius: 16px;
            padding: 1.5rem;
            text-align: center;
            border: 1px solid #e2e8f0;
            transition: all 0.3s ease;
        }
        
        .stat-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
        }
        
        .stat-icon {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 1rem;
            font-size: 1.5rem;
        }
        
        .stat-today .stat-icon { background: linear-gradient(135deg, #10b981, #059669); color: white; }
        .stat-week .stat-icon { background: linear-gradient(135deg, #3b82f6, #1d4ed8); color: white; }
        .stat-month .stat-icon { background: linear-gradient(135deg, #8b5cf6, #7c3aed); color: white; }
        
        .stat-value {
            font-size: 2.5rem;
            font-weight: 800;
            margin-bottom: 0.5rem;
        }
        
        .stat-today .stat-value { color: #10b981; }
        .stat-week .stat-value { color: #3b82f6; }
        .stat-month .stat-value { color: #8b5cf6; }
        
        .stat-label {
            color: var(--secondary);
            font-weight: 600;
            font-size: 0.9rem;
        }
        
        .movement-list {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        
        .movement-item {
            display: flex;
            align-items: center;
            padding: 1.25rem;
            border-bottom: 1px solid #f1f5f9;
            transition: all 0.3s ease;
            border-radius: 12px;
            margin-bottom: 0.5rem;
        }
        
        .movement-item:hover {
            background: #f8fafc;
            transform: translateX(4px);
        }
        
        .movement-icon {
            width: 48px;
            height: 48px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 1rem;
            font-size: 1.25rem;
        }
        
        .movement-in {
            background: linear-gradient(135deg, #f0fdf4, #dcfce7);
            color: #10b981;
        }
        
        .movement-content {
            flex-grow: 1;
        }
        
        .movement-title {
            font-weight: 600;
            margin: 0 0 0.5rem 0;
            color: var(--dark);
            font-size: 1.1rem;
        }
        
        .movement-details {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
        }
        
        .movement-detail {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: var(--secondary);
            font-size: 0.9rem;
        }
        
        .movement-detail i {
            color: var(--success);
        }
        
        .supplier-stat {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 1rem;
            background: #f8fafc;
            border-radius: 12px;
            margin-bottom: 0.75rem;
            transition: all 0.3s ease;
        }
        
        .supplier-stat:hover {
            background: #f1f5f9;
            transform: translateX(4px);
        }
        
        .supplier-info {
            display: flex;
            align-items: center;
            gap: 1rem;
            flex: 1;
        }
        
        .supplier-color {
            width: 12px;
            height: 12px;
            border-radius: 50%;
        }
        
        .supplier-name {
            font-weight: 600;
            color: var(--dark);
        }
        
        .supplier-count {
            font-weight: 700;
            font-size: 1.2rem;
            color: var(--success);
        }
        
        .info-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1.5rem;
        }
        
        .info-card {
            background: linear-gradient(135deg, #f0f9ff, #e0f2fe);
            border-radius: 16px;
            padding: 1.5rem;
            border: 1px solid #bae6fd;
        }
        
        .info-card.warning {
            background: linear-gradient(135deg, #fffbeb, #fef3c7);
            border: 1px solid #fcd34d;
        }
        
        .info-card.danger {
            background: linear-gradient(135deg, #fef2f2, #fee2e2);
            border: 1px solid #fca5a5;
        }
        
        .toast-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
        }
        
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .card {
            animation: fadeInUp 0.6s ease-out;
        }
        
        .stat-card {
            animation: fadeInUp 0.8s ease-out;
        }
        
        @media (max-width: 1024px) {
            .stats-grid {
                grid-template-columns: 1fr;
            }
            
            .info-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body class="flex">
    <%- include('./partials/header'); %>
    
    <!-- Conteúdo Principal -->
    <main class="flex-1 overflow-auto min-h-screen">
        <div class="main-container">
            <!-- Header da Página -->
            <div class="section-header">
                <h1 class="section-title">
                    <i class="fas fa-sign-in-alt"></i>
                    Entrada de Reagentes
                </h1>
                <div class="text-sm text-gray-600">
                    <i class="fas fa-user mr-2"></i>
                    Logado como: <strong><%= user.name %></strong>
                </div>
            </div>
            
            <div class="grid grid-cols-1 xl:grid-cols-2 gap-8">
                <!-- Formulário de Entrada -->
                <div class="space-y-6">
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">
                                <i class="fas fa-file-import"></i>
                                Registrar Entrada
                            </h2>
                        </div>
                        <div class="p-6">
                            <form id="input-form">
                                <div class="mb-5">
                                    <label for="reagent" class="form-label required-field">
                                        <i class="fas fa-flask mr-2"></i>Reagente
                                    </label>
                                    <select class="form-select" id="reagent" name="reagent" required>
                                        <option value="" selected disabled>Selecione um reagente...</option>
                                        <% produtos.forEach(produto => { %>
                                            <option value="<%= produto.id_produto %>" 
                                                    data-unit="<%= produto.unidade_medida %>"
                                                    data-stock="<%= produto.quantidade %>"
                                                    data-location="<%= produto.localizacao %>">
                                                <%= produto.nome %> - Estoque: <%= produto.quantidade %> <%= produto.unidade_medida %>
                                                <% if (produto.quantidade <= 5) { %>
                                                    <span class="text-danger"> ⚠️ Baixo Estoque</span>
                                                <% } %>
                                            </option>
                                        <% }); %>
                                    </select>
                                    <div class="mt-2 text-sm text-gray-600" id="reagent-info">
                                        Selecione um reagente para ver informações detalhadas
                                    </div>
                                </div>
                                
                                <div class="mb-5">
                                    <label for="quantity" class="form-label required-field">
                                        <i class="fas fa-balance-scale mr-2"></i>Quantidade de Entrada
                                    </label>
                                    <div class="input-group">
                                        <input type="number" class="form-control" id="quantity" name="quantity" 
                                               min="0.1" step="0.1" required placeholder="Ex: 5.0">
                                        <span class="input-group-text" id="unit-measure">unidade</span>
                                    </div>
                                    <div class="mt-2 text-sm text-gray-600" id="quantity-info">
                                        Digite a quantidade que está entrando no estoque
                                    </div>
                                </div>
                                
                                <div class="mb-5">
                                    <label for="responsible" class="form-label required-field">
                                        <i class="fas fa-user-check mr-2"></i>Responsável
                                    </label>
                                    <input type="text" class="form-control" id="responsible" name="responsible" 
                                           required placeholder="Digite seu nome completo">
                                </div>
                                
                                <div class="mb-5">
                                    <label for="supplier" class="form-label">
                                        <i class="fas fa-truck mr-2"></i>Fornecedor
                                    </label>
                                    <input type="text" class="form-control" id="supplier" name="supplier" 
                                           placeholder="Digite o nome do fornecedor">
                                </div>
                                
                                <div class="mb-5">
                                    <label for="purchaseDate" class="form-label">
                                        <i class="fas fa-calendar-alt mr-2"></i>Data da Compra
                                    </label>
                                    <input type="date" class="form-control" id="purchaseDate" name="purchaseDate">
                                </div>
                                
                                <div class="mb-5">
                                    <label for="notes" class="form-label">
                                        <i class="fas fa-sticky-note mr-2"></i>Observações
                                    </label>
                                    <textarea class="form-control" id="notes" name="notes" rows="3" 
                                              placeholder="Observações adicionais sobre a entrada..."></textarea>
                                </div>
                                
                                <button type="submit" class="btn-success">
                                    <i class="fas fa-paper-plane mr-2"></i>
                                    Registrar Entrada
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
                
                <!-- Painel Direito -->
                <div class="space-y-6">
                    <!-- Estatísticas -->
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">
                                <i class="fas fa-chart-bar"></i>
                                Estatísticas de Entrada
                            </h2>
                        </div>
                        <div class="p-6">
                            <div class="stats-grid">
                                <div class="stat-card stat-today">
                                    <div class="stat-icon">
                                        <i class="fas fa-calendar-day"></i>
                                    </div>
                                    <div class="stat-value" id="today-inputs">0</div>
                                    <div class="stat-label">Entradas Hoje</div>
                                </div>
                                
                                <div class="stat-card stat-week">
                                    <div class="stat-icon">
                                        <i class="fas fa-calendar-week"></i>
                                    </div>
                                    <div class="stat-value" id="week-inputs">0</div>
                                    <div class="stat-label">Esta Semana</div>
                                </div>
                                
                                <div class="stat-card stat-month">
                                    <div class="stat-icon">
                                        <i class="fas fa-calendar-alt"></i>
                                    </div>
                                    <div class="stat-value" id="month-inputs">0</div>
                                    <div class="stat-label">Este Mês</div>
                                </div>
                            </div>
                            
                            <h6 class="font-semibold text-gray-700 mb-4 flex items-center">
                                <i class="fas fa-truck mr-2 text-purple-500"></i>
                                Fornecedores Frequentes
                            </h6>
                            <div id="suppliers-stats">
                                <!-- Carregado via JavaScript -->
                            </div>
                        </div>
                    </div>
                    
                    <!-- Movimentações Recentes -->
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">
                                <i class="fas fa-history"></i>
                                Entradas Recentes
                            </h2>
                            <button class="btn btn-outline-success btn-sm" id="refresh-inputs">
                                <i class="fas fa-sync-alt"></i>
                            </button>
                        </div>
                        <div class="p-4">
                            <ul class="movement-list" id="input-movements-list">
                                <!-- Carregado via JavaScript -->
                            </ul>
                            <div class="text-center p-4 text-gray-500" id="loading-inputs">
                                <i class="fas fa-spinner fa-spin fa-2x mb-2"></i>
                                <p>Carregando entradas...</p>
                            </div>
                        </div>
                        <div class="card-footer p-4 bg-gray-50 border-t">
                            <div class="flex justify-between items-center text-sm text-gray-600">
                                <span>
                                    <i class="fas fa-clock mr-1"></i>
                                    <span id="last-update">Atualizando...</span>
                                </span>
                                <span id="total-inputs">0 registros</span>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Informações do Estoque -->
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">
                                <i class="fas fa-info-circle"></i>
                                Status do Estoque
                            </h2>
                        </div>
                        <div class="p-6">
                            <div class="info-grid">
                                <div class="info-card warning">
                                    <div class="flex items-center">
                                        <i class="fas fa-exclamation-triangle text-yellow-500 text-xl mr-3"></i>
                                        <div>
                                            <h6 class="font-semibold text-yellow-700">Estoque Baixo</h6>
                                            <p class="text-2xl font-bold text-yellow-600 mb-0" id="low-stock-items">0</p>
                                            <small class="text-yellow-500">produtos precisam de reposição</small>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="info-card danger">
                                    <div class="flex items-center">
                                        <i class="fas fa-times-circle text-red-500 text-xl mr-3"></i>
                                        <div>
                                            <h6 class="font-semibold text-red-700">Estoque Esgotado</h6>
                                            <p class="text-2xl font-bold text-red-600 mb-0" id="out-of-stock-items">0</p>
                                            <small class="text-red-500">produtos sem estoque</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="mt-4 p-3 bg-blue-50 rounded-lg border border-blue-200">
                                <div class="flex items-center">
                                    <i class="fas fa-lightbulb text-blue-500 mr-2"></i>
                                    <span class="text-sm text-blue-700 font-medium">
                                        Dica: Mantenha o controle das entradas para garantir o abastecimento contínuo
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Container para Notificações -->
    <div class="toast-container"></div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Função para exibir notificações
        function showToast(message, type = 'success') {
            const toastContainer = document.querySelector('.toast-container');
            const toastId = 'toast-' + Date.now();
            
            const toast = document.createElement('div');
            toast.className = `toast align-items-center text-bg-${type} border-0`;
            toast.id = toastId;
            toast.setAttribute('role', 'alert');
            toast.setAttribute('aria-live', 'assertive');
            toast.setAttribute('aria-atomic', 'true');
            
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-triangle'} me-2"></i>
                        ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            `;
            
            toastContainer.appendChild(toast);
            
            const bsToast = new bootstrap.Toast(toast, {
                delay: 5000
            });
            bsToast.show();
            
            toast.addEventListener('hidden.bs.toast', () => {
                toast.remove();
            });
        }

        // Atualizar informações do reagente selecionado
        document.getElementById('reagent').addEventListener('change', function() {
            const unitMeasure = document.getElementById('unit-measure');
            const reagentInfo = document.getElementById('reagent-info');
            const selectedOption = this.options[this.selectedOption];
            
            if (selectedOption && selectedOption.value) {
                const unit = selectedOption.dataset.unit;
                const stock = parseFloat(selectedOption.dataset.stock);
                const location = selectedOption.dataset.location;
                
                unitMeasure.textContent = unit;
                reagentInfo.innerHTML = `
                    <strong>Estoque atual:</strong> ${stock} ${unit} | 
                    <strong>Localização:</strong> ${location}
                    ${stock <= 5 ? '<span class="text-danger font-bold"> ⚠️ BAIXO ESTOQUE - REPOSIÇÃO NECESSÁRIA</span>' : ''}
                `;
            } else {
                unitMeasure.textContent = 'unidade';
                reagentInfo.textContent = 'Selecione um reagente para ver informações detalhadas';
            }
        });

        // Envio do formulário de entrada
        document.getElementById('input-form').addEventListener('submit', async function(event) {
            event.preventDefault();
            
            const submitBtn = this.querySelector('button[type="submit"]');
            const originalText = submitBtn.innerHTML;
            
            // Mostrar loading
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Registrando...';
            submitBtn.disabled = true;
            
            const formData = new FormData(this);
            const data = Object.fromEntries(formData.entries());
            
            try {
                const response = await fetch('/api/input', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showToast(result.message, 'success');
                    this.reset();
                    
                    // Recarregar dados
                    await loadInputMovements();
                    await loadInputStatistics();
                    
                    // Recarregar a página após 2 segundos para atualizar a lista de produtos
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000);
                    
                } else {
                    showToast(result.message, 'danger');
                }
            } catch (error) {
                console.error('Erro ao registrar entrada:', error);
                showToast('Erro de conexão. Tente novamente.', 'danger');
            } finally {
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
            }
        });

        // Função para carregar movimentações de entrada
        async function loadInputMovements() {
            try {
                const response = await fetch('/api/input-movements');
                const movements = await response.json();
                
                const movementsList = document.getElementById('input-movements-list');
                const loadingElement = document.getElementById('loading-inputs');
                
                movementsList.innerHTML = '';
                if (loadingElement) loadingElement.style.display = 'none';
                
                if (movements.length === 0) {
                    movementsList.innerHTML = `
                        <li class="movement-item text-center text-muted py-4">
                            <i class="fas fa-inbox fa-2x mb-2"></i>
                            <p>Nenhuma entrada registrada</p>
                        </li>
                    `;
                    return;
                }
                
                movements.forEach(movement => {
                    const movementItem = document.createElement('li');
                    movementItem.className = 'movement-item';
                    
                    const date = new Date(movement.date);
                    const formattedDate = date.toLocaleDateString('pt-BR') + ' ' + date.toLocaleTimeString('pt-BR', {hour: '2-digit', minute: '2-digit'});
                    
                    movementItem.innerHTML = `
                        <div class="movement-icon movement-in">
                            <i class="fas fa-arrow-down"></i>
                        </div>
                        <div class="movement-content">
                            <p class="movement-title">${movement.reagent}</p>
                            <div class="movement-details">
                                <span class="movement-detail">
                                    <i class="fas fa-balance-scale"></i>
                                    ${movement.quantity} ${movement.unit}
                                </span>
                                <span class="movement-detail">
                                    <i class="fas fa-user"></i>
                                    ${movement.responsible}
                                </span>
                                <span class="movement-detail">
                                    <i class="fas fa-clock"></i>
                                    ${formattedDate}
                                </span>
                                ${movement.project ? `
                                <span class="movement-detail">
                                    <i class="fas fa-truck"></i>
                                    ${movement.project}
                                </span>
                                ` : ''}
                            </div>
                        </div>
                    `;
                    
                    movementsList.appendChild(movementItem);
                });
                
                document.getElementById('last-update').textContent = `Atualizado às ${new Date().toLocaleTimeString('pt-BR')}`;
                document.getElementById('total-inputs').textContent = `${movements.length} registros`;
                
            } catch (error) {
                console.error('Erro ao carregar entradas:', error);
                const movementsList = document.getElementById('input-movements-list');
                movementsList.innerHTML = `
                    <li class="movement-item text-center text-danger py-4">
                        <i class="fas fa-exclamation-triangle fa-2x mb-2"></i>
                        <p>Erro ao carregar entradas</p>
                    </li>
                `;
            }
        }

        // Função para carregar estatísticas de entrada
        async function loadInputStatistics() {
            try {
                const response = await fetch('/api/input-statistics');
                const stats = await response.json();
                
                // Atualizar contadores com animação
                animateCounter('today-inputs', stats.todayInputs);
                animateCounter('week-inputs', stats.weekInputs);
                animateCounter('month-inputs', stats.monthInputs);
                
                // Atualizar status do estoque
                document.getElementById('low-stock-items').textContent = stats.lowStockItems;
                document.getElementById('out-of-stock-items').textContent = stats.outOfStockItems;
                
                // Atualizar estatísticas de fornecedores
                const suppliersStats = document.getElementById('suppliers-stats');
                suppliersStats.innerHTML = '';
                
                if (stats.recentSuppliers.length === 0) {
                    suppliersStats.innerHTML = `
                        <div class="text-center py-4 text-gray-500">
                            <i class="fas fa-inbox fa-2x mb-2"></i>
                            <p>Nenhum fornecedor registrado</p>
                        </div>
                    `;
                    return;
                }
                
                const colors = ['#10b981', '#3b82f6', '#8b5cf6'];
                
                stats.recentSuppliers.forEach((supplier, index) => {
                    const supplierStat = document.createElement('div');
                    supplierStat.className = 'supplier-stat';
                    
                    supplierStat.innerHTML = `
                        <div class="supplier-info">
                            <div class="supplier-color" style="background-color: ${colors[index]}"></div>
                            <div class="supplier-name">${supplier.supplier || supplier.name}</div>
                        </div>
                        <div class="supplier-count">
                            ${supplier.count} entradas
                        </div>
                    `;
                    
                    suppliersStats.appendChild(supplierStat);
                });
                
            } catch (error) {
                console.error('Erro ao carregar estatísticas de entrada:', error);
            }
        }

        // Função para animar contadores
        function animateCounter(elementId, targetValue) {
            const element = document.getElementById(elementId);
            const currentValue = parseInt(element.textContent) || 0;
            const duration = 1000;
            const steps = 60;
            const stepValue = (targetValue - currentValue) / steps;
            let currentStep = 0;

            const timer = setInterval(() => {
                currentStep++;
                const value = Math.floor(currentValue + (stepValue * currentStep));
                element.textContent = value;

                if (currentStep >= steps) {
                    element.textContent = targetValue;
                    clearInterval(timer);
                }
            }, duration / steps);
        }

        // Botão de atualizar entradas
        document.getElementById('refresh-inputs').addEventListener('click', function() {
            loadInputMovements();
            showToast('Entradas atualizadas!', 'info');
        });

        // Carregar dados iniciais
        document.addEventListener('DOMContentLoaded', function() {
            loadInputMovements();
            loadInputStatistics();
            
            // Atualizar a cada 30 segundos
            setInterval(() => {
                loadInputMovements();
                loadInputStatistics();
            }, 30000);
        });
    </script>
</body>
</html>