<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <%- include('./partials/head'); %>
    <style>
        :root {
            --primary: #000000;
            --secondary: #000000;
            --success: #000000;
            --warning: #3b3b3b;
            --info: #353535;
            --light: #f8f9fa;
            --dark: #212529;
            --gray: #6c757d;
            --light-gray: #e9ecef;
        }
        
        body {
            background-color: #f5f7fb;
            color: #333;
            min-height: 100vh;
        }
        
        .main-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 1.5rem;
        }
        
        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }
        
        .section-title {
            font-size: 1.75rem;
            font-weight: 700;
            color: #2d3748;
        }
        
        .card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            overflow: hidden;
            margin-bottom: 2rem;
            transition: all 0.3s ease;
        }
        
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.12);
        }
        
        .card-header {
            padding: 1.25rem 1.5rem;
            border-bottom: 1px solid #e2e8f0;
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        }
        
        .card-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: #2d3748;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .primary-btn {
            background: linear-gradient(135deg, #4e54c8 0%, #8f94fb 100%);
            color: white;
            border: none;
            border-radius: 8px;
            padding: 0.7rem 1.2rem;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px rgba(78, 84, 200, 0.2);
            text-decoration: none;
        }
        
        .primary-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(78, 84, 200, 0.3);
        }
        
        .danger-btn {
            background: linear-gradient(135deg, #3c6288 0%, #2063a7 100%);
            color: white;
            border: none;
            border-radius: 8px;
            padding: 0.7rem 1.2rem;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px rgba(231, 76, 60, 0.2);
        }
        
        .danger-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(231, 76, 60, 0.3);
        }
        
        /* BOTÃO DE SUCESSO PARA ENTRADA */
        .btn-success {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white;
            border: none;
            border-radius: 8px;
            padding: 1rem 2rem;
            font-weight: 600;
            font-size: 1.1rem;
            display: flex;
            align-items: center;
            gap: 0.75rem;
            transition: all 0.3s ease;
            box-shadow: 0 4px 12px rgba(40, 167, 69, 0.3);
            width: 100%;
            justify-content: center;
        }
        
        .btn-success:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(40, 167, 69, 0.4);
            background: linear-gradient(135deg, #218838 0%, #1e7e34 100%);
        }
        
        .form-control, .form-select {
            padding: 0.75rem 1rem;
            border-radius: 8px;
            margin-bottom: 1.2rem;
            border: 1px solid #d1d3e2;
            width: 100%;
        }
        
        .form-label {
            font-weight: 600;
            color: var(--dark);
            margin-bottom: 0.5rem;
            display: block;
        }
        
        .required-field::after {
            content: " *";
            color: #2b1a18;
        }
        
        .input-group {
            display: flex;
        }
        
        .input-group .form-control {
            margin-bottom: 0;
            border-top-right-radius: 0;
            border-bottom-right-radius: 0;
        }
        
        .input-group-text {
            background-color: #f8f9fa;
            border: 1px solid #d1d3e2;
            border-left: none;
            padding: 0.75rem 1rem;
            border-top-right-radius: 8px;
            border-bottom-right-radius: 8px;
            color: #6c757d;
        }
        
        .alert {
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
        }
        
        .alert-warning {
            background-color: rgba(255, 193, 7, 0.15);
            border-left: 4px solid #ffc107;
            color: #856404;
        }
        
        /* ESTILOS PARA ESTATÍSTICAS DE ENTRADA */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 1rem;
            margin-bottom: 1.5rem;
        }
        
        .stat-card {
            background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
            border-radius: 10px;
            padding: 1.25rem;
            text-align: center;
            border: 1px solid #e2e8f0;
            transition: all 0.3s ease;
        }
        
        .stat-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);
        }
        
        .stat-icon {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 0.75rem;
            font-size: 1.25rem;
        }
        
        .stat-today .stat-icon { 
            background: linear-gradient(135deg, #28a745, #20c997); 
            color: white; 
        }
        
        .stat-week .stat-icon { 
            background: linear-gradient(135deg, #17a2b8, #138496); 
            color: white; 
        }
        
        .stat-month .stat-icon { 
            background: linear-gradient(135deg, #6f42c1, #5a2d9c); 
            color: white; 
        }
        
        .stat-value {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 0.25rem;
        }
        
        .stat-today .stat-value { color: #28a745; }
        .stat-week .stat-value { color: #17a2b8; }
        .stat-month .stat-value { color: #6f42c1; }
        
        .stat-label {
            color: #6c757d;
            font-weight: 500;
            font-size: 0.85rem;
        }
        
        /* ESTILOS PARA FORNECEDORES */
        .supplier-stat {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0.875rem;
            background: #f8f9fa;
            border-radius: 8px;
            margin-bottom: 0.5rem;
            transition: all 0.3s ease;
            border: 1px solid #e9ecef;
        }
        
        .supplier-stat:hover {
            background: #e9ecef;
            transform: translateX(3px);
        }
        
        .supplier-info {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            flex: 1;
        }
        
        .supplier-color {
            width: 10px;
            height: 10px;
            border-radius: 50%;
        }
        
        .supplier-name {
            font-weight: 600;
            color: #2d3748;
            font-size: 0.9rem;
        }
        
        .supplier-count {
            font-weight: 700;
            font-size: 1rem;
            color: #28a745;
        }
        
        /* ESTILOS PARA CARDS DE INFORMAÇÃO */
        .info-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
        }
        
        .info-card {
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            border-radius: 10px;
            padding: 1.25rem;
            border: 1px solid #dee2e6;
        }
        
        .info-card.warning {
            background: linear-gradient(135deg, #fff3cd, #ffeaa7);
            border: 1px solid #ffd351;
        }
        
        .info-card.danger {
            background: linear-gradient(135deg, #f8d7da, #f1aeb5);
            border: 1px solid #ea868f;
        }
        
        .movement-list {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        
        .movement-item {
            display: flex;
            align-items: center;
            padding: 1rem;
            border-bottom: 1px solid #e3e6f0;
            transition: background-color 0.3s;
        }
        
        .movement-item:hover {
            background-color: #f8f9fc;
        }
        
        .movement-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 1rem;
            flex-shrink: 0;
        }
        
        .movement-in {
            background-color: rgba(52, 168, 83, 0.2);
            color: #28a745;
        }
        
        .movement-out {
            background-color: rgba(231, 74, 59, 0.2);
            color: #e74c3c;
        }
        
        .movement-content {
            flex-grow: 1;
        }
        
        .movement-title {
            font-weight: 600;
            margin: 0 0 0.25rem 0;
            color: var(--dark);
        }
        
        .movement-details {
            display: flex;
            gap: 15px;
        }
        
        .movement-quantity, .movement-date {
            font-size: 0.85rem;
            color: #6e707e;
        }
        
        .stats-info {
            font-size: 0.85rem;
            color: #6c757d;
            display: flex;
            align-items: center;
            gap: 5px;
        }
        
        .view-all-btn {
            background: transparent;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 0.6rem 1.2rem;
            font-size: 0.9rem;
            color: var(--primary);
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            text-decoration: none;
        }
        
        .view-all-btn:hover {
            background: var(--primary);
            color: white;
            border-color: var(--primary);
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(67, 97, 238, 0.2);
        }
        
        .toast-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
        }
        
        @media (max-width: 768px) {
            .main-container {
                padding: 1rem;
            }
            
            .section-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }
            
            .card-header {
                flex-direction: column;
                gap: 1rem;
                align-items: flex-start;
            }
            
            .movement-details {
                flex-direction: column;
                gap: 5px;
            }
            
            .stats-grid {
                grid-template-columns: 1fr;
                gap: 0.75rem;
            }
            
            .info-grid {
                grid-template-columns: 1fr;
                gap: 0.75rem;
            }
        }
    </style>
</head>
<body class="flex">
    <%- include('./partials/header'); %>
    
    <!-- Conteúdo Principal -->
    <main class="flex-1 overflow-auto bg-gray-50 min-h-screen">
        <div class="main-container">
            <!-- Header da Página -->
            <div class="section-header">
                <h1 class="section-title">
                    <i class="fas fa-sign-in-alt text-success mr-2"></i>
                    Entrada de Reagentes
                </h1>
                <div class="text-sm text-gray-600">
                    <i class="fas fa-user mr-2"></i>
                    Logado como: <strong><%= user.name %></strong>
                </div>
            </div>
            
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <!-- Formulário de Entrada -->
                <div>
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">
                                <i class="fas fa-file-import text-success"></i>
                                Registrar Entrada de Reagente
                            </h2>
                        </div>
                        <div class="p-6">
                            <form id="input-form">
                                <div class="mb-4">
                                    <label for="reagent" class="form-label required-field">Reagente</label>
                                    <select class="form-select" id="reagent" name="reagent" required>
                                        <option value="" selected disabled>Selecione um reagente</option>
                                        <% produtos.forEach(produto => { %>
                                            <option value="<%= produto.id_produto %>" 
                                                    data-unit="<%= produto.unidade_medida %>"
                                                    data-stock="<%= produto.quantidade %>"
                                                    data-location="<%= produto.localizacao %>">
                                                <%= produto.nome %> - Estoque: <%= produto.quantidade %> <%= produto.unidade_medida %>
                                                <% if (produto.quantidade <= 5) { %>
                                                    <span class="text-danger"> (Baixo Estoque)</span>
                                                <% } %>
                                            </option>
                                        <% }); %>
                                    </select>
                                    <small class="form-text text-muted" id="reagent-info">
                                        Selecione um reagente para ver informações detalhadas
                                    </small>
                                </div>
                                
                                <div class="mb-4">
                                    <label for="quantity" class="form-label required-field">Quantidade de Entrada</label>
                                    <div class="input-group">
                                        <input type="number" class="form-control" id="quantity" name="quantity" 
                                               min="0.1" step="0.1" required placeholder="Ex: 5.0">
                                        <span class="input-group-text" id="unit-measure">unidade</span>
                                    </div>
                                    <small class="form-text text-muted" id="quantity-info">
                                        Digite a quantidade que está entrando no estoque
                                    </small>
                                </div>
                                
                                <div class="mb-4">
                                    <label for="responsible" class="form-label required-field">Responsável</label>
                                    <input type="text" class="form-control" id="responsible" name="responsible" 
                                           required placeholder="Digite seu nome completo">
                                </div>
                                
                                <div class="mb-4">
                                    <label for="supplier" class="form-label">Fornecedor</label>
                                    <input type="text" class="form-control" id="supplier" name="supplier" 
                                           placeholder="Digite o nome do fornecedor">
                                </div>
                                
                                <div class="mb-4">
                                    <label for="purchaseDate" class="form-label">Data da Compra</label>
                                    <input type="date" class="form-control" id="purchaseDate" name="purchaseDate">
                                </div>
                                
                                <div class="mb-4">
                                    <label for="notes" class="form-label">Observações</label>
                                    <textarea class="form-control" id="notes" name="notes" rows="3" 
                                              placeholder="Observações adicionais sobre a entrada..."></textarea>
                                </div>
                                
                                <div class="d-grid">
                                    <button type="submit" class="btn-success">
                                        <i class="fas fa-paper-plane me-2"></i>Registrar Entrada
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
                
                <!-- Últimas Movimentações e Estatísticas -->
                <div>
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">
                                <i class="fas fa-exchange-alt"></i>
                                Últimas Entradas
                            </h2>
                            <button class="view-all-btn" id="refresh-inputs">
                                <i class="fas fa-sync-alt"></i> Atualizar
                            </button>
                        </div>
                        
                        <ul class="movement-list" id="input-movements-list">
                            <!-- As movimentações serão carregadas via JavaScript -->
                        </ul>
                        
                        <div class="card-footer p-4 bg-gray-50 border-t">
                            <div class="flex justify-between items-center text-sm text-gray-600">
                                <span class="stats-info">
                                    <i class="fas fa-clock mr-1"></i>
                                    <span id="last-update">Atualizando...</span>
                                </span>
                                <span id="total-inputs">0 registros</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">
                                <i class="fas fa-chart-bar text-success"></i>
                                Estatísticas de Entrada
                            </h2>
                        </div>
                        <div class="p-6">
                            <div class="stats-grid">
                                <div class="stat-card stat-today">
                                    <div class="stat-icon">
                                        <i class="fas fa-calendar-day"></i>
                                    </div>
                                    <div class="stat-value" id="today-inputs">0</div>
                                    <div class="stat-label">Entradas Hoje</div>
                                </div>
                                
                                <div class="stat-card stat-week">
                                    <div class="stat-icon">
                                        <i class="fas fa-calendar-week"></i>
                                    </div>
                                    <div class="stat-value" id="week-inputs">0</div>
                                    <div class="stat-label">Esta Semana</div>
                                </div>
                                
                                <div class="stat-card stat-month">
                                    <div class="stat-icon">
                                        <i class="fas fa-calendar-alt"></i>
                                    </div>
                                    <div class="stat-value" id="month-inputs">0</div>
                                    <div class="stat-label">Este Mês</div>
                                </div>
                            </div>
                            
                            <div class="mt-4">
                                <h6 class="font-semibold mb-3 flex items-center">
                                    <i class="fas fa-truck mr-2 text-purple-500"></i>
                                    Fornecedores Frequentes
                                </h6>
                                <div id="suppliers-stats">
                                    <!-- As estatísticas serão carregadas via JavaScript -->
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Informações do Estoque -->
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">
                                <i class="fas fa-info-circle"></i>
                                Status do Estoque
                            </h2>
                        </div>
                        <div class="p-6">
                            <div class="info-grid">
                                <div class="info-card warning">
                                    <div class="flex items-center">
                                        <i class="fas fa-exclamation-triangle text-yellow-500 text-xl mr-3"></i>
                                        <div>
                                            <h6 class="font-semibold text-yellow-700">Estoque Baixo</h6>
                                            <p class="text-2xl font-bold text-yellow-600 mb-0" id="low-stock-items">0</p>
                                            <small class="text-yellow-500">produtos precisam de reposição</small>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="info-card danger">
                                    <div class="flex items-center">
                                        <i class="fas fa-times-circle text-red-500 text-xl mr-3"></i>
                                        <div>
                                            <h6 class="font-semibold text-red-700">Estoque Esgotado</h6>
                                            <p class="text-2xl font-bold text-red-600 mb-0" id="out-of-stock-items">0</p>
                                            <small class="text-red-500">produtos sem estoque</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="mt-4 p-3 bg-blue-50 rounded-lg border border-blue-200">
                                <div class="flex items-center">
                                    <i class="fas fa-lightbulb text-blue-500 mr-2"></i>
                                    <span class="text-sm text-blue-700 font-medium">
                                        Dica: Mantenha o controle das entradas para garantir o abastecimento contínuo
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Container para Notificações -->
    <div class="toast-container"></div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Função para exibir notificações
        function showToast(message, type = 'success') {
            const toastContainer = document.querySelector('.toast-container');
            const toastId = 'toast-' + Date.now();
            
            const toast = document.createElement('div');
            toast.className = `toast align-items-center text-bg-${type} border-0`;
            toast.id = toastId;
            toast.setAttribute('role', 'alert');
            toast.setAttribute('aria-live', 'assertive');
            toast.setAttribute('aria-atomic', 'true');
            
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-triangle'} me-2"></i>
                        ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            `;
            
            toastContainer.appendChild(toast);
            
            const bsToast = new bootstrap.Toast(toast, {
                delay: 5000
            });
            bsToast.show();
            
            toast.addEventListener('hidden.bs.toast', () => {
                toast.remove();
            });
        }

        // Atualizar informações do reagente selecionado
        document.getElementById('reagent').addEventListener('change', function() {
            const unitMeasure = document.getElementById('unit-measure');
            const reagentInfo = document.getElementById('reagent-info');
            const selectedOption = this.options[this.selectedIndex];
            
            if (selectedOption && selectedOption.value) {
                const unit = selectedOption.dataset.unit;
                const stock = parseFloat(selectedOption.dataset.stock);
                const location = selectedOption.dataset.location;
                
                unitMeasure.textContent = unit;
                reagentInfo.innerHTML = `
                    <strong>Estoque atual:</strong> ${stock} ${unit} | 
                    <strong>Localização:</strong> ${location}
                    ${stock <= 5 ? '<span class="text-danger font-bold"> ⚠️ BAIXO ESTOQUE - REPOSIÇÃO NECESSÁRIA</span>' : ''}
                `;
            } else {
                unitMeasure.textContent = 'unidade';
                reagentInfo.textContent = 'Selecione um reagente para ver informações detalhadas';
            }
        });

        // Envio do formulário de entrada
        document.getElementById('input-form').addEventListener('submit', async function(event) {
            event.preventDefault();
            
            const submitBtn = this.querySelector('button[type="submit"]');
            const originalText = submitBtn.innerHTML;
            
            // Mostrar loading
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Registrando...';
            submitBtn.disabled = true;
            
            const formData = new FormData(this);
            const data = Object.fromEntries(formData.entries());
            
            try {
                const response = await fetch('/api/input', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showToast(result.message, 'success');
                    this.reset();
                    
                    // Recarregar dados
                    await loadInputMovements();
                    await loadInputStatistics();
                    
                    // Recarregar a página após 2 segundos para atualizar a lista de produtos
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000);
                    
                } else {
                    showToast(result.message, 'danger');
                }
            } catch (error) {
                console.error('Erro ao registrar entrada:', error);
                showToast('Erro de conexão. Tente novamente.', 'danger');
            } finally {
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
            }
        });

        // Função para carregar movimentações de entrada
        // Função para carregar movimentações de ENTRADA (4 últimas)
// Função para carregar movimentações de ENTRADA (4 últimas)
async function loadInputMovements() {
    try {
        console.log('🔄 Carregando últimas 4 entradas...');
        
        const response = await fetch('/api/input-movements');
        console.log('📡 Resposta da API:', response.status, response.statusText);
        
        if (!response.ok) {
            throw new Error(`Erro HTTP: ${response.status}`);
        }
        
        const movements = await response.json();
        console.log('📦 Dados recebidos:', movements);
        
        const movementsList = document.getElementById('input-movements-list');
        movementsList.innerHTML = '';
        
        if (!movements || movements.length === 0) {
            console.log('ℹ️ Nenhuma entrada encontrada');
            movementsList.innerHTML = `
                <li class="movement-item text-center text-muted py-4">
                    <i class="fas fa-inbox fa-2x mb-2"></i>
                    <p>Nenhuma entrada registrada</p>
                    <small class="text-muted">As entradas aparecerão aqui quando forem registradas</small>
                </li>
            `;
            return;
        }
        
        console.log(`✅ ${movements.length} entradas carregadas`);
        
        movements.forEach((movement, index) => {
            console.log(`📝 Processando entrada ${index + 1}:`, movement);
            
            const movementItem = document.createElement('li');
            movementItem.className = 'movement-item';
            
            const date = new Date(movement.date);
            const formattedDate = date.toLocaleDateString('pt-BR') + ' ' + date.toLocaleTimeString('pt-BR', {hour: '2-digit', minute: '2-digit'});
            
            movementItem.innerHTML = `
                <div class="movement-icon movement-in">
                    <i class="fas fa-arrow-down"></i>
                </div>
                <div class="movement-content">
                    <p class="movement-title">Entrada - ${movement.reagent}</p>
                    <div class="movement-details">
                        <span class="movement-quantity"><strong>${movement.quantity} ${movement.unit}</strong></span>
                        <span class="movement-date">${formattedDate}</span>
                        <span class="movement-responsible">por ${movement.responsible}</span>
                    </div>
                    ${movement.supplier && movement.supplier !== 'Não informado' ? `<small class="text-muted">Fornecedor: ${movement.supplier}</small>` : ''}
                    ${movement.project && !movement.project.includes('Fornecedor:') ? `<small class="text-muted">${movement.project}</small>` : ''}
                </div>
            `;
            
            movementsList.appendChild(movementItem);
        });
        
        document.getElementById('last-update').textContent = `Atualizado às ${new Date().toLocaleTimeString('pt-BR')}`;
        document.getElementById('total-inputs').textContent = `${movements.length} registro${movements.length !== 1 ? 's' : ''}`;
        
    } catch (error) {
        console.error('❌ Erro ao carregar entradas:', error);
        const movementsList = document.getElementById('input-movements-list');
        movementsList.innerHTML = `
            <li class="movement-item text-center text-danger py-4">
                <i class="fas fa-exclamation-triangle fa-2x mb-2"></i>
                <p>Erro ao carregar entradas</p>
                <small class="text-muted">${error.message}</small>
            </li>
        `;
    }
}
        // Função para carregar estatísticas de entrada
        async function loadInputStatistics() {
            try {
                const response = await fetch('/api/input-statistics');
                const stats = await response.json();
                
                // Atualizar contadores com animação
                animateCounter('today-inputs', stats.todayInputs);
                animateCounter('week-inputs', stats.weekInputs);
                animateCounter('month-inputs', stats.monthInputs);
                
                // Atualizar status do estoque
                document.getElementById('low-stock-items').textContent = stats.lowStockItems;
                document.getElementById('out-of-stock-items').textContent = stats.outOfStockItems;
                
                // Atualizar estatísticas de fornecedores
                const suppliersStats = document.getElementById('suppliers-stats');
                suppliersStats.innerHTML = '';
                
                if (stats.recentSuppliers.length === 0) {
                    suppliersStats.innerHTML = `
                        <div class="text-center py-4 text-gray-500">
                            <i class="fas fa-inbox fa-2x mb-2"></i>
                            <p>Nenhum fornecedor registrado</p>
                        </div>
                    `;
                    return;
                }
                
                const colors = ['#28a745', '#17a2b8', '#6f42c1'];
                
                stats.recentSuppliers.forEach((supplier, index) => {
                    const supplierStat = document.createElement('div');
                    supplierStat.className = 'supplier-stat';
                    
                    supplierStat.innerHTML = `
                        <div class="supplier-info">
                            <div class="supplier-color" style="background-color: ${colors[index]}"></div>
                            <div class="supplier-name">${supplier.supplier || supplier.name}</div>
                        </div>
                        <div class="supplier-count">
                            ${supplier.count} entradas
                        </div>
                    `;
                    
                    suppliersStats.appendChild(supplierStat);
                });
                
            } catch (error) {
                console.error('Erro ao carregar estatísticas de entrada:', error);
            }
        }

        // Função para animar contadores
        function animateCounter(elementId, targetValue) {
            const element = document.getElementById(elementId);
            const currentValue = parseInt(element.textContent) || 0;
            const duration = 1000;
            const steps = 60;
            const stepValue = (targetValue - currentValue) / steps;
            let currentStep = 0;

            const timer = setInterval(() => {
                currentStep++;
                const value = Math.floor(currentValue + (stepValue * currentStep));
                element.textContent = value;

                if (currentStep >= steps) {
                    element.textContent = targetValue;
                    clearInterval(timer);
                }
            }, duration / steps);
        }

        // Botão de atualizar entradas
        document.getElementById('refresh-inputs').addEventListener('click', function() {
            loadInputMovements();
            showToast('Entradas atualizadas!', 'info');
        });

        // Carregar dados iniciais
        document.addEventListener('DOMContentLoaded', function() {
            loadInputMovements();
            loadInputStatistics();
            
            // Atualizar a cada 30 segundos
            setInterval(() => {
                loadInputMovements();
                loadInputStatistics();
            }, 30000);
        });
    </script>
</body>
</html>