<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <%- include('./partials/head'); %>
    <style>
        /* Reset e Variáveis */
        :root {
            --primary: #2c3e50;
            --primary-hover: rgb(62, 75, 87);
            --secondary: #6c757d;
            --success: #28a745;
            --warning: #ffc107;
            --danger: #dc3545;
            --info: #17a2b8;
            --light: #f8f9fa;
            --dark: #343a40;
            --gray: #6c757d;
            --light-gray: #e9ecef;
            --border: #e2e8f0;
            --shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            --radius: 12px;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Inter', sans-serif;
        }
        
        body {
            background-color: #f5f7fb;
            color: #333;
            min-height: 100vh;
            line-height: 1.6;
        }
        
        /* Layout Principal */
        .flex { display: flex; }
        .flex-1 { flex: 1; }
        .overflow-auto { overflow: auto; }
        .min-h-screen { min-height: 100vh; }
        
        .main-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 1.5rem;
        }
        
        /* Header da Página */
        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }
        
        .section-title {
            font-size: 1.75rem;
            font-weight: 700;
            color: var(--dark);
        }
        
        .button-container {
            display: flex;
            gap: 1rem;
        }
        
        .primary-btn {
            background-color: var(--primary);
            color: white;
            border: none;
            border-radius: 8px;
            padding: 12px 24px;
            font-size: 0.95rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            text-decoration: none;
        }
        
        .primary-btn:hover {
            background-color: var(--primary-hover);
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }
        
        /* Barra de Pesquisa */
        .search-container {
            background: white;
            border-radius: var(--radius);
            box-shadow: var(--shadow);
            padding: 1.5rem;
            margin-bottom: 2rem;
        }
        
        .search-form {
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
        }
        
        /* Filtros Básicos - Linha */
        .search-filters-row {
            display: flex;
            gap: 1rem;
            align-items: flex-end;
            flex-wrap: wrap;
        }
        
        .filter-group {
            display: flex;
            flex-direction: column;
            min-width: 180px;
            flex: 1;
        }
        
        .filter-label {
            font-weight: 500;
            color: #4a5568;
            margin-bottom: 0.5rem;
            font-size: 0.9rem;
        }
        
        .filter-select {
            width: 100%;
            padding: 0.75rem 1rem;
            border: 1px solid var(--border);
            border-radius: 8px;
            font-size: 0.95rem;
            background: white;
            transition: all 0.2s ease;
        }
        
        .filter-select:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(44, 62, 80, 0.1);
        }
        
        /* Linha Principal de Busca */
        .search-main-row {
            display: flex;
            gap: 1rem;
            align-items: flex-end;
        }
        
        .search-input-group {
            flex: 2;
            min-width: 300px;
        }
        
        .search-label {
            font-weight: 500;
            color: #4a5568;
            margin-bottom: 0.5rem;
            font-size: 0.9rem;
        }
        
        .search-input {
            width: 100%;
            padding: 0.75rem 1rem;
            border: 1px solid var(--border);
            border-radius: 8px;
            font-size: 1rem;
            transition: all 0.2s ease;
        }
        
        .search-input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(44, 62, 80, 0.1);
        }
        
        .search-actions {
            display: flex;
            gap: 0.75rem;
            align-items: flex-end;
        }
        
        .search-btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 8px;
            font-size: 0.95rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            text-decoration: none;
            white-space: nowrap;
        }
        
        .search-btn.primary {
            background-color: var(--primary);
            color: white;
        }
        
        .search-btn.primary:hover {
            background-color: var(--primary-hover);
            transform: translateY(-2px);
        }
        
        .search-btn.secondary {
            background-color: var(--secondary);
            color: white;
        }
        
        .search-btn.secondary:hover {
            background-color: #5a6268;
            transform: translateY(-2px);
        }
        
        .search-btn.info {
            background-color: var(--info);
            color: white;
        }
        
        .search-btn.info:hover {
            background-color: #138496;
            transform: translateY(-2px);
        }
        
        /* Filtros Avançados */
        .advanced-filters {
            padding-top: 1.5rem;
            border-top: 1px solid var(--border);
        }
        
        .advanced-filters-row {
            display: flex;
            gap: 1rem;
            align-items: flex-end;
            flex-wrap: wrap;
        }
        
        /* Container de Produtos */
        .products-container {
            background: white;
            border-radius: var(--radius);
            box-shadow: var(--shadow);
            overflow: hidden;
        }
        
        .products-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--border);
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        }
        
        .products-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--dark);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .summary-text {
            font-size: 0.9rem;
            color: var(--gray);
            display: flex;
            align-items: center;
            gap: 0.4rem;
        }
        
        /* Grid de Produtos */
        .products-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 1.5rem;
            padding: 1.5rem;
        }
        
        /* Cards de Produto */
        .product-card {
            background: white;
            border-radius: var(--radius);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
            border: 1px solid var(--border);
            overflow: hidden;
            transition: all 0.3s ease;
        }
        
        .product-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.12);
        }
        
        .product-header {
            padding: 1.25rem;
            border-bottom: 1px solid var(--border);
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            gap: 1rem;
        }
        
        .product-info {
            flex: 1;
        }
        
        .product-name {
            font-size: 1.1rem;
            font-weight: 600;
            color: var(--dark);
            margin-bottom: 0.25rem;
        }
        
        .product-id {
            font-size: 0.85rem;
            color: var(--gray);
        }
        
        .product-category {
            padding: 0.4rem 0.8rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 500;
            background: rgba(40, 167, 69, 0.15);
            color: var(--success);
            white-space: nowrap;
        }
        
        .product-body {
            padding: 1.25rem;
        }
        
        .product-details {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
            margin-bottom: 1.25rem;
        }
        
        .detail-item {
            display: flex;
            flex-direction: column;
        }
        
        .detail-label {
            font-size: 0.8rem;
            color: var(--gray);
            margin-bottom: 0.25rem;
        }
        
        .detail-value {
            font-weight: 500;
            color: #495057;
        }
        
        /* Indicadores Visuais */
        .danger-level {
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 0.75rem;
            font-weight: 500;
            display: inline-block;
        }
        
        .danger-baixo { background: rgba(40, 167, 69, 0.15); color: var(--success); }
        .danger-moderado { background: rgba(255, 193, 7, 0.15); color: var(--warning); }
        .danger-alto { background: rgba(253, 126, 20, 0.15); color: #fd7e14; }
        .danger-extremo { background: rgba(220, 53, 69, 0.15); color: var(--danger); }
        
        .quantity-display {
            font-weight: 500;
            color: #495057;
            padding: 0.4rem 0.8rem;
            border-radius: 20px;
            background: var(--light);
            display: inline-block;
        }
        
        .warning-quantity {
            background: rgba(255, 193, 7, 0.15);
            color: #fd7e14;
            font-weight: 600;
        }
        
        .status-badge {
            padding: 0.5rem 0.8rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 500;
            display: inline-flex;
            align-items: center;
            gap: 0.4rem;
        }
        
        .status-normal { background: rgba(40, 167, 69, 0.15); color: var(--success); }
        .status-warning { background: rgba(255, 193, 7, 0.15); color: var(--warning); }
        .status-critical { background: rgba(220, 53, 69, 0.15); color: var(--danger); font-weight: 600; }
        
        /* Ações do Produto */
        .product-footer {
            padding: 1rem 1.25rem;
            border-top: 1px solid var(--border);
            display: flex;
            justify-content: flex-end;
        }
        
        .action-buttons {
            display: flex;
            gap: 0.5rem;
        }
        
        .btn-action {
            width: 34px;
            height: 34px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            border: none;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .btn-details { background: rgba(108, 117, 125, 0.1); color: var(--gray); }
        .btn-details:hover { background: var(--gray); color: white; }
        
        .btn-edit { background: rgba(23, 162, 184, 0.1); color: var(--info); }
        .btn-edit:hover { background: var(--info); color: white; }
        
        .btn-delete { background: rgba(220, 53, 69, 0.1); color: var(--danger); }
        .btn-delete:hover { background: var(--danger); color: white; }
        
        /* Footer dos Produtos */
        .products-footer {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem 1.5rem;
            background: var(--light);
            border-top: 1px solid var(--border);
        }
        
        .view-all-btn {
            background: transparent;
            border: 1px solid var(--border);
            border-radius: 8px;
            padding: 0.6rem 1.2rem;
            font-size: 0.9rem;
            color: var(--primary);
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            text-decoration: none;
        }
        
        .view-all-btn:hover {
            background: var(--primary);
            color: white;
            border-color: var(--primary);
            transform: translateY(-2px);
        }
        
        /* Estado Vazio */
        .no-results {
            text-align: center;
            padding: 3rem;
            color: var(--gray);
            grid-column: 1 / -1;
        }
        
        .no-results i {
            font-size: 3rem;
            margin-bottom: 1rem;
            opacity: 0.5;
        }
        
        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            align-items: center;
            justify-content: center;
            padding: 1rem;
        }
        
        .modal-content {
            background-color: white;
            border-radius: var(--radius);
            width: 100%;
            max-width: 700px;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            animation: modalFadeIn 0.3s ease;
        }
        
        @keyframes modalFadeIn {
            from { opacity: 0; transform: translateY(-20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .modal-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--border);
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        }
        
        .modal-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--dark);
        }
        
        .close-btn {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: var(--gray);
            transition: color 0.2s ease;
        }
        
        .close-btn:hover {
            color: var(--danger);
        }
        
        .modal-body {
            padding: 1.5rem;
        }
        
        .detail-section {
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid var(--border);
        }
        
        .detail-section-title {
            font-size: 1.1rem;
            font-weight: 600;
            color: var(--dark);
            margin-bottom: 0.75rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .details-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
        }
        
        .detail-group {
            margin-bottom: 1rem;
        }
        
        .modal-detail-label {
            font-weight: 600;
            color: #495057;
            margin-bottom: 0.25rem;
            display: block;
            font-size: 0.9rem;
        }
        
        .modal-detail-value {
            color: var(--gray);
            font-size: 0.95rem;
        }
        
        .modal-footer {
            padding: 1rem 1.5rem;
            border-top: 1px solid var(--border);
            display: flex;
            justify-content: flex-end;
        }
        
        .btn-secondary {
            background-color: var(--secondary);
            color: white;
            border: none;
            border-radius: 8px;
            padding: 0.75rem 1.5rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .btn-secondary:hover {
            background-color: #5a6268;
        }
        
        /* Responsividade */
        @media (max-width: 1200px) {
            .search-filters-row,
            .search-main-row,
            .advanced-filters-row {
                gap: 0.75rem;
            }
            
            .filter-group {
                min-width: 160px;
            }
        }
        
        @media (max-width: 768px) {
            .main-container {
                padding: 1rem;
            }
            
            .section-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }
            
            .button-container {
                width: 100%;
                justify-content: center;
            }
            
            .search-filters-row,
            .search-main-row,
            .advanced-filters-row {
                flex-direction: column;
                align-items: stretch;
            }
            
            .filter-group,
            .search-input-group {
                min-width: auto;
            }
            
            .search-actions {
                justify-content: stretch;
            }
            
            .search-btn {
                flex: 1;
                justify-content: center;
            }
            
            .products-header {
                flex-direction: column;
                gap: 1rem;
                align-items: flex-start;
            }
            
            .products-grid {
                grid-template-columns: 1fr;
                padding: 1rem;
            }
            
            .product-details {
                grid-template-columns: 1fr;
            }
            
            .products-footer {
                flex-direction: column;
                gap: 1rem;
                align-items: stretch;
            }
            
            .view-all-btn {
                align-self: center;
            }
            
            .modal-content {
                width: 95%;
            }
            
            .details-grid {
                grid-template-columns: 1fr;
            }
        }
        
        @media (max-width: 480px) {
            .search-container {
                padding: 1rem;
            }
            
            .search-filters-row,
            .search-main-row,
            .advanced-filters-row {
                gap: 0.5rem;
            }
            
            .filter-select,
            .search-input {
                padding: 0.6rem 0.8rem;
            }
            
            .search-btn {
                padding: 0.6rem 1rem;
                font-size: 0.9rem;
            }
            
            .product-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.5rem;
            }
            
            .action-buttons {
                width: 100%;
                justify-content: center;
            }
        }

        /* Estilos para a seção de PDFs */
.pdfs-list {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
}

.pdf-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    border: 1px solid var(--border);
    border-radius: 8px;
    background: var(--light);
    transition: all 0.2s ease;
}

.pdf-item:hover {
    background: #f8f9fa;
    border-color: var(--primary);
}

.pdf-info {
    display: flex;
    align-items: center;
    gap: 1rem;
    flex: 1;
}

.pdf-icon {
    color: #dc3545;
    font-size: 1.5rem;
}

.pdf-details {
    flex: 1;
}

.pdf-name {
    font-weight: 500;
    color: var(--dark);
    margin-bottom: 0.25rem;
    word-break: break-word;
}

.pdf-meta {
    display: flex;
    gap: 1rem;
    font-size: 0.8rem;
    color: var(--gray);
}

.pdf-meta span {
    display: flex;
    align-items: center;
    gap: 0.25rem;
}

.pdf-actions {
    display: flex;
    gap: 0.5rem;
}

.pdf-download-btn,
.pdf-delete-btn {
    padding: 0.5rem;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
}

.pdf-download-btn {
    background: rgba(40, 167, 69, 0.1);
    color: var(--success);
}

.pdf-download-btn:hover {
    background: var(--success);
    color: white;
}

.pdf-delete-btn {
    background: rgba(220, 53, 69, 0.1);
    color: var(--danger);
}

.pdf-delete-btn:hover {
    background: var(--danger);
    color: white;
}

.loading-pdfs,
.no-pdfs,
.error-pdfs {
    text-align: center;
    padding: 2rem;
    color: var(--gray);
}

.loading-pdfs i,
.no-pdfs i,
.error-pdfs i {
    font-size: 2rem;
    margin-bottom: 1rem;
    display: block;
}

/* Responsividade para PDFs */
@media (max-width: 768px) {
    .pdf-item {
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
    }
    
    .pdf-actions {
        align-self: flex-end;
    }
    
    .pdf-meta {
        flex-direction: column;
        gap: 0.25rem;
    }
}

/* Estilos para a data de validade no modal */
.data-validade-expirada {
    background: rgba(220, 53, 69, 0.15) !important;
    color: #dc3545 !important;
    font-weight: 600;
}

.data-validade-proxima {
    background: rgba(255, 193, 7, 0.15) !important;
    color: #ffc107 !important;
    font-weight: 600;
}

.data-validade-ok {
    background: rgba(40, 167, 69, 0.15) !important;
    color: #28a745 !important;
}

/* Ajuste para o badge de data no modal */
.modal-detail-value .status-badge {
    padding: 0.4rem 0.8rem;
    border-radius: 20px;
    font-size: 0.85rem;
    display: inline-flex;
    align-items: center;
    gap: 0.4rem;
}

.pdf-view-btn {
        background: rgba(23, 162, 184, 0.1);
        color: var(--info);
        padding: 0.5rem;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .pdf-view-btn:hover {
        background: var(--info);
        color: white;
    }

    .pdf-actions {
        display: flex;
        gap: 0.5rem;
    }
    </style>
</head>
<body class="flex">
    <%- include('./partials/header'); %>
    
    <!-- Conteúdo Principal -->
    <main class="flex-1 overflow-auto bg-gray-50 min-h-screen">
        <div class="main-container">
            <!-- Header da Página -->
            <div class="section-header">
                <h1 class="section-title">Gerenciamento de Produtos</h1>
                <div class="button-container">
                    <a href="/produtos/adicionar" class="primary-btn">
                        <i class="fas fa-plus-circle"></i> Adicionar Produto
                    </a>
                </div>
            </div>
            
            <!-- Barra de Pesquisa Melhorada -->
            <div class="search-container">
                <form id="searchForm" class="search-form" method="GET" action="/produtos">
                    <!-- Filtros Básicos em Linha -->
                    <div class="search-filters-row">
                        <!-- Filtro por Categoria -->
                        <div class="filter-group">
                            <label class="filter-label" for="category">Categoria</label>
                            <select class="filter-select" id="category" name="category">
                                <option value="">Todas as categorias</option>
                                <% const categoriasUnicas = [...new Set((produtos || []).map(p => p.tipo).filter(Boolean))]; %>
                                <% categoriasUnicas.forEach(categoria => { %>
                                    <option value="<%= categoria %>" <%= selectedCategory === categoria ? 'selected' : '' %>>
                                        <%= categoria %>
                                    </option>
                                <% }); %>
                            </select>
                        </div>

                        <!-- Filtro por Status -->
                        <div class="filter-group">
                            <label class="filter-label" for="status">Status</label>
                            <select class="filter-select" id="status" name="status">
                                <option value="">Todos os status</option>
                                <option value="available" <%= status === 'available' ? 'selected' : '' %>>Disponível</option>
                                <option value="low_stock" <%= status === 'low_stock' ? 'selected' : '' %>>Baixo Estoque</option>
                                <option value="out_of_stock" <%= status === 'out_of_stock' ? 'selected' : '' %>>Esgotado</option>
                            </select>
                        </div>

                        <!-- Filtro por Ordem -->
                        <div class="filter-group">
                            <label class="filter-label" for="orderBy">Ordenar por</label>
                            <select class="filter-select" id="orderBy" name="orderBy">
                                <option value="nome" <%= orderBy === 'nome' ? 'selected' : '' %>>Nome (A-Z)</option>
                                <option value="id_produto" <%= orderBy === 'id_produto' ? 'selected' : '' %>>ID (1,2,3...)</option>
                                <option value="quantidade" <%= orderBy === 'quantidade' ? 'selected' : '' %>>Quantidade</option>
                                <option value="data_criacao" <%= orderBy === 'data_criacao' ? 'selected' : '' %>>Data de Criação</option>
                            </select>
                        </div>
                    </div>

                    <!-- Linha Principal - Campo de Busca e Ações -->
                    <div class="search-main-row">
                        <div class="search-input-group">
                            <label class="search-label" for="searchTerm">Pesquisar</label>
                            <input type="text" class="search-input" id="searchTerm" name="search" 
                                placeholder="Digite para pesquisar..." 
                                value="<%= searchTerm || '' %>">
                        </div>
                        
                        <div class="search-actions">
                            <button type="submit" class="search-btn primary">
                                <i class="fas fa-search"></i> Pesquisar
                            </button>
                            
                            <% if (searchTerm || selectedCategory || status || dateFilter || searchType !== 'name' || orderBy !== 'nome') { %>
                                <a href="/produtos" class="search-btn secondary">
                                    <i class="fas fa-times"></i> Limpar
                                </a>
                            <% } %>
                            
                            <button type="button" class="search-btn info" id="advancedSearchBtn">
                                <i class="fas fa-sliders-h"></i> Avançado
                            </button>
                        </div>
                    </div>

                    <!-- Filtros Avançados em Linha -->
                    <div class="advanced-filters" id="advancedFilters" style="display: none;">
                        <div class="advanced-filters-row">
                            <!-- Filtro por Periculosidade -->
                            <div class="filter-group">
                                <label class="filter-label" for="dangerLevel">Periculosidade</label>
                                <select class="filter-select" id="dangerLevel" name="dangerLevel">
                                    <option value="">Todos os níveis</option>
                                    <option value="baixo" <%= dangerLevel === 'baixo' ? 'selected' : '' %>>Baixo</option>
                                    <option value="moderado" <%= dangerLevel === 'moderado' ? 'selected' : '' %>>Moderado</option>
                                    <option value="alto" <%= dangerLevel === 'alto' ? 'selected' : '' %>>Alto</option>
                                    <option value="extremo" <%= dangerLevel === 'extremo' ? 'selected' : '' %>>Extremo</option>
                                </select>
                            </div>

                            <!-- Filtro por Fornecedor -->
                            <div class="filter-group">
                                <label class="filter-label" for="supplier">Fornecedor</label>
                                <select class="filter-select" id="supplier" name="supplier">
                                    <option value="">Todos os fornecedores</option>
                                    <% const fornecedoresUnicos = [...new Set((produtos || []).map(p => p.fornecedor).filter(Boolean))]; %>
                                    <% fornecedoresUnicos.forEach(fornecedor => { %>
                                        <option value="<%= fornecedor %>" <%= supplier === fornecedor ? 'selected' : '' %>>
                                            <%= fornecedor %>
                                        </option>
                                    <% }); %>
                                </select>
                            </div>

                            <!-- Filtro por Órgão Regulador -->
                            <div class="filter-group">
                                <label class="filter-label" for="regulatoryOrg">Órgão Regulador</label>
                                <select class="filter-select" id="regulatoryOrg" name="regulatoryOrg">
                                    <option value="">Todos os órgãos</option>
                                    <% const orgaosUnicos = [...new Set((produtos || []).map(p => p.orgao_regulador).filter(Boolean))]; %>
                                    <% orgaosUnicos.forEach(orgao => { %>
                                        <option value="<%= orgao %>" <%= regulatoryOrg === orgao ? 'selected' : '' %>>
                                            <%= orgao %>
                                        </option>
                                    <% }); %>
                                </select>
                            </div>
                        </div>
                    </div>
                </form>
            </div>

            <!-- Container de Produtos -->
            <div class="products-container">
                <div class="products-header">
                    <h2 class="products-title">
                        <i class="fas fa-flask"></i>
                        Produtos em Estoque
                    </h2>
                    <span class="summary-text">
                        <i class="fas fa-filter"></i>
                        <% if (searchTerm || selectedCategory || status || dateFilter) { %>
                            Filtros aplicados
                        <% } else { %>
                            Todos os produtos
                        <% } %>
                        • <%= produtos ? produtos.length : 0 %> itens
                    </span>
                </div>
                
                <div class="products-grid">
                    <% if (produtos && produtos.length > 0) { %>
                        <% produtos.forEach(produto => { %>
                            <div class="product-card">
                                <div class="product-header">
                                    <div class="product-info">
                                        <div class="product-name"><%= produto.nome %></div>
                                        <div class="product-id">ID: #<%= produto.id_produto %></div>
                                    </div>
                                    <span class="product-category"><%= produto.tipo %></span>
                                </div>
                                
                                <div class="product-body">
                                    <div class="product-details">
                                        <div class="detail-item">
                                            <span class="detail-label">Grau de Periculosidade</span>
                                            <% if (produto.grau_periculosidade) { 
                                                let dangerClass = 'danger-baixo';
                                                if (produto.grau_periculosidade === 'moderado') dangerClass = 'danger-moderado';
                                                if (produto.grau_periculosidade === 'alto') dangerClass = 'danger-alto';
                                                if (produto.grau_periculosidade === 'extremo') dangerClass = 'danger-extremo';
                                            %>
                                                <span class="danger-level <%= dangerClass %>">
                                                    <%= produto.grau_periculosidade %>
                                                </span>
                                            <% } else { %>
                                                <span class="detail-value">Não informado</span>
                                            <% } %>
                                        </div>
                                        
                                        <div class="detail-item">
                                            <span class="detail-label">Quantidade</span>
                                            <div class="quantity-display <%= produto.quantidade <= (produto.estoque_minimo || 10) ? 'warning-quantity' : '' %>">
                                                <%= formatarNumero(produto.quantidade) %> <%= produto.unidade_medida %>
                                            </div>
                                        </div>
                                        
                                        <div class="detail-item">
                                            <span class="detail-label">Localização</span>
                                            <span class="detail-value"><%= produto.localizacao || 'Não informada' %></span>
                                        </div>
                                        
                                        <div class="detail-item">
                                            <span class="detail-label">Status</span>
                                            <% let statusClass = 'status-normal';
                                            let statusText = 'Disponível';
                                            let statusIcon = 'fa-check-circle';
                                            
                                            if (produto.quantidade <= (produto.estoque_minimo || 10)) {
                                                statusClass = 'status-warning';
                                                statusText = 'Baixo Estoque';
                                                statusIcon = 'fa-exclamation-triangle';
                                            }
                                            
                                            if (produto.quantidade === 0) {
                                                statusClass = 'status-critical';
                                                statusText = 'Esgotado';
                                                statusIcon = 'fa-times-circle';
                                            }
                                            %>
                                            <span class="status-badge <%= statusClass %>">
                                                <i class="fas <%= statusIcon %>"></i> <%= statusText %>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="product-footer">
                                    <div class="action-buttons">
                                        <button class="btn-action btn-details" title="Ver Detalhes" 
                                            onclick="abrirModal(
                                                <%= produto.id_produto %>, 
                                                '<%= produto.nome.replace(/'/g, "\\'") %>', 
                                                '<%= produto.tipo.replace(/'/g, "\\'") %>', 
                                                '<%= produto.grau_periculosidade || '' %>', 
                                                <%= produto.quantidade %>, 
                                                '<%= produto.unidade_medida %>', 
                                                '<%= produto.localizacao || '' %>', 
                                                <%= produto.estoque_minimo || 0 %>, 
                                                '<%= produto.fornecedor || '' %>', 
                                                '<%= produto.orgao_regulador || '' %>', 
                                                '<%= produto.data_aquisicao || '' %>', 
                                                <%= produto.disponivel %>, 
                                                '<%= produto.descricao || '' %>', 
                                                '<%= produto.instrucoes_seguranca || '' %>',
                                                '<%= produto.data_validade || '' %>'  <!-- NOVO PARÂMETRO -->
                                            )">
                                            <i class="fas fa-ellipsis-v"></i>
                                        </button>
                                        <button class="btn-action btn-edit" title="Editar" onclick="editarProduto(<%= produto.id_produto %>)">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <form action="/produtos/deletar/<%= produto.id_produto %>" method="POST" style="display: inline;" 
                                              onsubmit="return confirm('Tem certeza que deseja excluir este produto? Esta ação não pode ser desfeita.');">
                                            <button type="submit" class="btn-action btn-delete" title="Excluir">
                                                <i class="fas fa-trash-alt"></i>
                                            </button>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        <% }) %>
                    <% } else { %>
                        <div class="no-results">
                            <i class="fas fa-search"></i>
                            <h3>Nenhum produto encontrado</h3>
                            <p><%= searchTerm ? 'Tente ajustar os termos da pesquisa.' : 'Adicione o primeiro produto!' %></p>
                            <% if (searchTerm || selectedCategory || status || dateFilter) { %>
                                <a href="/produtos" class="primary-btn" style="margin-top: 1rem;">
                                    <i class="fas fa-list"></i> Ver todos os produtos
                                </a>
                            <% } %>
                        </div>
                    <% } %>
                </div>
                
                <div class="products-footer">
                    <span class="summary-text">
                        <i class="fas fa-database"></i> 
                        Total de <%= produtos ? produtos.length : 0 %> produtos 
                        <% if (searchTerm || selectedCategory || status || dateFilter) { %>encontrados<% } else { %>listados<% } %>
                    </span>
                    <% if (!searchTerm && !selectedCategory && !status && !dateFilter && produtos && produtos.length > 5) { %>
                        <a href="#top" class="view-all-btn">
                            <i class="fas fa-arrow-up"></i> Voltar ao Topo
                        </a>
                    <% } %>
                </div>
            </div>
        </div>
    </main>

    <!-- Modal de Detalhes -->
    <div id="detailsModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">Detalhes do Produto</h2>
                <button class="close-btn" onclick="fecharModal()">&times;</button>
            </div>
            <div class="modal-body" id="modalBody">
                <!-- Conteúdo será preenchido dinamicamente via JavaScript -->
            </div>
            <div class="modal-footer">
                <button class="btn-secondary" onclick="fecharModal()">Fechar</button>
            </div>
        </div>
    </div>

    <script>
    function abrirModal(id, nome, tipo, grauPericulosidade, quantidade, unidadeMedida, localizacao, estoqueMinimo, fornecedor, orgaoRegulador, dataAquisicao, disponivel, descricao, instrucoesSeguranca, dataValidade) {
    const modal = document.getElementById('detailsModal');
    const modalBody = document.getElementById('modalBody');

    // Garantir que as quantidades sejam números
    const quantidadeNum = parseFloat(quantidade);
    const estoqueMinimoNum = parseFloat(estoqueMinimo);
    
    // Formatar dados do produto para exibição
    const formatarData = (data) => {
        if (!data) return 'Não informada';
        try {
            return new Date(data).toLocaleDateString('pt-BR');
        } catch (e) {
            return data;
        }
    };
    
    const formatarPericulosidade = (grau) => {
        if (!grau) return 'Não informado';
        const classes = {
            'baixo': 'danger-baixo',
            'moderado': 'danger-moderado',
            'alto': 'danger-alto',
            'extremo': 'danger-extremo'
        };
        return `<span class="danger-level ${classes[grau] || ''}">${grau}</span>`;
    };
    
    const formatarStatus = (quantidade, estoqueMinimo) => {
        if (quantidade === 0) return 'Esgotado';
        if (quantidade <= estoqueMinimo) return 'Baixo Estoque';
        return 'Disponível';
    };

    // Função para formatar números com ponto
    function formatarNumero(num) {
        if (num === null || num === undefined) return '0.0';
        // Converte para número e formata com 1 casa decimal
        return parseFloat(num).toFixed(1);
    }

    // Função para exibir números formatados no HTML
    function exibirNumeroFormatado(num) {
        return formatarNumero(num).replace('.', ','); // Para exibição visual
    }

    //função de validade
    const formatarDataValidade = (data) => {
        if (!data) return { texto: 'Não informada', classe: '', icone: '' };
        
        try {
            const dataValidade = new Date(data);
            const hoje = new Date();
            const diffTime = dataValidade - hoje;
            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
            
            let classe = '';
            let icone = '';
            
            if (diffDays < 0) {
                // Expirado
                classe = 'status-critical';
                icone = 'fa-exclamation-triangle';
                return { 
                    texto: `${dataValidade.toLocaleDateString('pt-BR')} (Expirado)`,
                    classe: classe,
                    icone: icone
                };
            } else if (diffDays <= 30) {
                // Expira em menos de 30 dias
                classe = 'status-warning';
                icone = 'fa-exclamation-circle';
                return { 
                    texto: `${dataValidade.toLocaleDateString('pt-BR')} (Expira em ${diffDays} dias)`,
                    classe: classe,
                    icone: icone
                };
            } else {
                // Válido
                classe = 'status-normal';
                icone = 'fa-check-circle';
                return { 
                    texto: dataValidade.toLocaleDateString('pt-BR'),
                    classe: classe,
                    icone: icone
                };
            }
        } catch (e) {
            return { texto: data, classe: '', icone: '' };
        }
    };
    
    const dataValidadeFormatada = formatarDataValidade(dataValidade);
    
    // Construir o conteúdo do modal
    let modalContent = `
        <div class="detail-section">
            <h3 class="detail-section-title">
                <i class="fas fa-info-circle"></i> Informações Básicas
            </h3>
            <div class="details-grid">
                <div class="detail-group">
                    <span class="modal-detail-label">ID do Produto</span>
                    <div class="modal-detail-value">#${id}</div>
                </div>
                <div class="detail-group">
                    <span class="modal-detail-label">Nome</span>
                    <div class="modal-detail-value">${nome}</div>
                </div>
                <div class="detail-group">
                    <span class="modal-detail-label">Categoria</span>
                    <div class="modal-detail-value">${tipo}</div>
                </div>
                <div class="detail-group">
                    <span class="modal-detail-label">Grau de Periculosidade</span>
                    <div class="modal-detail-value">${formatarPericulosidade(grauPericulosidade)}</div>
                </div>
            </div>
        </div>
        
        <div class="detail-section">
            <h3 class="detail-section-title">
                <i class="fas fa-boxes"></i> Estoque e Localização
            </h3>
            <div class="details-grid">
                <div class="detail-group">
                    <span class="modal-detail-label">Quantidade</span>
                    <div class="modal-detail-value">${exibirNumeroFormatado(quantidadeNum)} ${unidadeMedida}</div>
                </div>
                <div class="detail-group">
                    <span class="modal-detail-label">Estoque Mínimo</span>
                    <div class="modal-detail-value">${exibirNumeroFormatado(estoqueMinimoNum)} ${unidadeMedida}</div>
                </div>
                <div class="detail-group">
                    <span class="modal-detail-label">Localização</span>
                    <div class="modal-detail-value">${localizacao || 'Não informada'}</div>
                </div>
                <div class="detail-group">
                    <span class="modal-detail-label">Status</span>
                    <div class="modal-detail-value">${formatarStatus(quantidade, estoqueMinimo)}</div>
                </div>
            </div>
        </div>
        
         <div class="detail-section">
        <h3 class="detail-section-title">
            <i class="fas fa-industry"></i> Fornecedor e Regulamentação
        </h3>
        <div class="details-grid">
            <div class="detail-group">
                <span class="modal-detail-label">Fornecedor</span>
                <div class="modal-detail-value">${fornecedor || 'Não informado'}</div>
            </div>
            <div class="detail-group">
                <span class="modal-detail-label">Órgão Regulador</span>
                <div class="modal-detail-value">${orgaoRegulador || 'Não informado'}</div>
            </div>
            <div class="detail-group">
                <span class="modal-detail-label">Data de Aquisição</span>
                <div class="modal-detail-value">${formatarData(dataAquisicao)}</div>
            </div>
            <!-- NOVO CAMPO: Data de Validade -->
            <div class="detail-group">
                <span class="modal-detail-label">Data de Validade</span>
                <div class="modal-detail-value">
                    <span class="status-badge ${dataValidadeFormatada.classe}" style="display: inline-flex; align-items: center; gap: 0.25rem;">
                        <i class="fas ${dataValidadeFormatada.icone}"></i>
                        ${dataValidadeFormatada.texto}
                    </span>
                </div>
            </div>
        </div>
    </div>
    `;

    // Adicionar informações adicionais se existirem
    if (descricao || instrucoesSeguranca) {
        modalContent += `
            <div class="detail-section">
                <h3 class="detail-section-title">
                    <i class="fas fa-file-alt"></i> Informações Adicionais
                </h3>
                <div class="details-grid">
        `;
        
        if (descricao) {
            modalContent += `
                    <div class="detail-group">
                        <span class="modal-detail-label">Descrição</span>
                        <div class="modal-detail-value">${descricao}</div>
                    </div>
            `;
        }
        
        if (instrucoesSeguranca) {
            modalContent += `
                    <div class="detail-group">
                        <span class="modal-detail-label">Instruções de Segurança</span>
                        <div class="modal-detail-value">${instrucoesSeguranca}</div>
                    </div>
            `;
        }
        
        modalContent += `
                </div>
            </div>
        `;
    }

    // Adicionar seção para PDFs
    modalContent += `
        <div class="detail-section">
            <h3 class="detail-section-title">
                <i class="fas fa-file-pdf"></i> Documentos Anexados
            </h3>
            <div id="pdfsContainer">
                <div class="loading-pdfs">
                    <i class="fas fa-spinner fa-spin"></i> Carregando documentos...
                </div>
            </div>
        </div>
    `;

    modalBody.innerHTML = modalContent;
    modal.style.display = 'flex';
    document.body.style.overflow = 'hidden';

    // Carregar PDFs do produto
    carregarPDFsDoProduto(id);
}
// Função para carregar PDFs do produto (ATUALIZADA)
function carregarPDFsDoProduto(productId) {
    const pdfsContainer = document.getElementById('pdfsContainer');
    
    fetch(`/api/produtos/${productId}/pdfs`)
        .then(response => response.json())
        .then(pdfs => {
            if (pdfs.length === 0) {
                pdfsContainer.innerHTML = `
                    <div class="no-pdfs">
                        <i class="fas fa-file-pdf" style="color: #6c757d; font-size: 2rem; margin-bottom: 1rem;"></i>
                        <p style="color: #6c757d; margin: 0;">Nenhum documento anexado</p>
                    </div>
                `;
                return;
            }

            let pdfsHTML = '<div class="pdfs-list">';
            
            pdfs.forEach(pdf => {
                const fileSize = formatarTamanhoArquivo(pdf.tamanho_arquivo);
                const uploadDate = new Date(pdf.data_upload).toLocaleDateString('pt-BR');
                
                pdfsHTML += `
                    <div class="pdf-item">
                        <div class="pdf-info">
                            <div class="pdf-icon">
                                <i class="fas fa-file-pdf"></i>
                            </div>
                            <div class="pdf-details">
                                <div class="pdf-name">${pdf.nome_original}</div>
                                <div class="pdf-meta">
                                    <span class="pdf-size">${fileSize}</span>
                                    <span class="pdf-date">${uploadDate}</span>
                                    <span class="pdf-uploader">por ${pdf.usuario_upload}</span>
                                </div>
                            </div>
                        </div>
                        <div class="pdf-actions">
                            <!-- NOVO BOTÃO DE VISUALIZAR -->
                            <button class="pdf-view-btn" 
                                    title="Visualizar PDF"
                                    onclick="visualizarPDF(${pdf.id})">
                                <i class="fas fa-eye"></i>
                            </button>
                            <a href="/produtos/pdfs/download/${pdf.id}" 
                               class="pdf-download-btn" 
                               title="Baixar PDF"
                               download>
                                <i class="fas fa-download"></i>
                            </a>
                            <button class="pdf-delete-btn" 
                                    title="Excluir PDF"
                                    onclick="excluirPDF(${pdf.id}, ${productId})">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                `;
            });
            
            pdfsHTML += '</div>';
            pdfsContainer.innerHTML = pdfsHTML;
        })
        .catch(error => {
            console.error('Erro ao carregar PDFs:', error);
            pdfsContainer.innerHTML = `
                <div class="error-pdfs">
                    <i class="fas fa-exclamation-triangle" style="color: #dc3545; font-size: 2rem; margin-bottom: 1rem;"></i>
                    <p style="color: #dc3545; margin: 0;">Erro ao carregar documentos</p>
                </div>
            `;
        });
}

// NOVA FUNÇÃO: Visualizar PDF
function visualizarPDF(pdfId) {
    // Abre o PDF em uma nova aba/guia
    const url = `/produtos/pdfs/visualizar/${pdfId}`;
    window.open(url, '_blank');
}


// Função para formatar tamanho do arquivo
function formatarTamanhoArquivo(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// Função para excluir PDF
function excluirPDF(pdfId, productId) {
    if (!confirm('Tem certeza que deseja excluir este documento? Esta ação não pode ser desfeita.')) {
        return;
    }

    fetch(`/api/produtos/pdfs/${pdfId}`, {
        method: 'DELETE',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => response.json())
    .then(result => {
        if (result.success) {
            // Recarregar a lista de PDFs
            carregarPDFsDoProduto(productId);
            
            // Mostrar mensagem de sucesso
            mostrarMensagem('Documento excluído com sucesso!', 'success');
        } else {
            throw new Error(result.error || 'Erro ao excluir documento');
        }
    })
    .catch(error => {
        console.error('Erro ao excluir PDF:', error);
        mostrarMensagem('Erro ao excluir documento: ' + error.message, 'error');
    });
}

// Função para mostrar mensagens temporárias
function mostrarMensagem(mensagem, tipo) {
    // Remove mensagens existentes
    const mensagensExistentes = document.querySelectorAll('.mensagem-temporaria');
    mensagensExistentes.forEach(msg => msg.remove());

    const mensagemDiv = document.createElement('div');
    mensagemDiv.className = `mensagem-temporaria mensagem-${tipo}`;
    mensagemDiv.innerHTML = `
        <div style="
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 20px;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            z-index: 10000;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            ${tipo === 'success' ? 'background: #28a745;' : 'background: #dc3545;'}
        ">
            <i class="fas ${tipo === 'success' ? 'fa-check-circle' : 'fa-exclamation-triangle'}"></i>
            ${mensagem}
        </div>
    `;

    document.body.appendChild(mensagemDiv);

    // Remove a mensagem após 3 segundos
    setTimeout(() => {
        mensagemDiv.remove();
    }, 3000);
}
        function fecharModal() {
            const modal = document.getElementById('detailsModal');
            modal.style.display = 'none';
            document.body.style.overflow = 'auto';
        }

        // Fechar modal ao clicar fora dele
        window.onclick = function(event) {
            const modal = document.getElementById('detailsModal');
            if (event.target === modal) {
                fecharModal();
            }
        }

        // Fechar modal com a tecla ESC
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                fecharModal();
            }
        });

        function confirmarExclusao(button, id, nome) {
            if (confirm(`Tem certeza que deseja excluir o produto "${nome}"? Esta ação não pode ser desfeita.`)) {
                // Envia o formulário diretamente
                button.closest('form').submit();
            }
        }

        function editarProduto(id) {
            window.location.href = `/produtos/editar/${id}`;
        }

        // Configuração da barra de pesquisa
        document.addEventListener('DOMContentLoaded', function() {
            const advancedSearchBtn = document.getElementById('advancedSearchBtn');
            const advancedFilters = document.getElementById('advancedFilters');
            
            // Toggle dos filtros avançados
            if (advancedSearchBtn && advancedFilters) {
                advancedSearchBtn.addEventListener('click', function() {
                    const isVisible = advancedFilters.style.display === 'block';
                    advancedFilters.style.display = isVisible ? 'none' : 'block';
                    this.innerHTML = isVisible ? 
                        '<i class="fas fa-sliders-h"></i> Avançado' : 
                        '<i class="fas fa-times"></i> Fechar';
                });
            }
            
            // Auto-submit quando mudar alguns filtros
            const autoSubmitFilters = ['category', 'status', 'dateFilter', 'dangerLevel', 'quantityFilter', 'supplier', 'regulatoryOrg'];
            autoSubmitFilters.forEach(filterId => {
                const element = document.getElementById(filterId);
                if (element) {
                    element.addEventListener('change', function() {
                        document.getElementById('searchForm').submit();
                    });
                }
            });
            
            // Busca em tempo real para o campo principal
            const searchInput = document.getElementById('searchTerm');
            let searchTimeout;
            
            if (searchInput) {
                searchInput.addEventListener('input', function() {
                    clearTimeout(searchTimeout);
                    searchTimeout = setTimeout(() => {
                        if (this.value.length >= 2 || this.value.length === 0) {
                            document.getElementById('searchForm').submit();
                        }
                    }, 800);
                });
            }
        });
    </script>
</body>
</html> 