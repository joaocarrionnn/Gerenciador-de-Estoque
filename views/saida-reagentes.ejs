<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <%- include('./partials/head'); %>
    <style>
        :root {
            --primary: #000000;
            --secondary: #000000;
            --success: #000000;
            --warning: #3b3b3b;
            --info: #353535;
            --light: #f8f9fa;
            --dark: #212529;
            --gray: #6c757d;
            --light-gray: #e9ecef;
        }
        
        body {
            background-color: #f5f7fb;
            color: #333;
            min-height: 100vh;
        }
        
        .main-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 1.5rem;
        }
        
        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }
        
        .section-title {
            font-size: 1.75rem;
            font-weight: 700;
            color: #2d3748;
        }
        
        .card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            overflow: hidden;
            margin-bottom: 2rem;
            transition: all 0.3s ease;
        }
        
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.12);
        }
        
        .card-header {
            padding: 1.25rem 1.5rem;
            border-bottom: 1px solid #e2e8f0;
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        }
        
        .card-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: #2d3748;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .primary-btn {
            background: linear-gradient(135deg, #4e54c8 0%, #8f94fb 100%);
            color: white;
            border: none;
            border-radius: 8px;
            padding: 0.7rem 1.2rem;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px rgba(78, 84, 200, 0.2);
            text-decoration: none;
        }
        
        .primary-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(78, 84, 200, 0.3);
        }
        
        .danger-btn {
            background: linear-gradient(135deg, #3c6288 0%, #2063a7 100%);
            color: white;
            border: none;
            border-radius: 8px;
            padding: 0.7rem 1.2rem;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px rgba(231, 76, 60, 0.2);
        }
        
        .danger-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(231, 76, 60, 0.3);
        }
        
        .form-control, .form-select {
            padding: 0.75rem 1rem;
            border-radius: 8px;
            margin-bottom: 1.2rem;
            border: 1px solid #d1d3e2;
            width: 100%;
        }
        
        .form-label {
            font-weight: 600;
            color: var(--dark);
            margin-bottom: 0.5rem;
            display: block;
        }
        
        .required-field::after {
            content: " *";
            color: #2b1a18;
        }
        
        .input-group {
            display: flex;
        }
        
        .input-group .form-control {
            margin-bottom: 0;
            border-top-right-radius: 0;
            border-bottom-right-radius: 0;
        }
        
        .input-group-text {
            background-color: #f8f9fa;
            border: 1px solid #d1d3e2;
            border-left: none;
            padding: 0.75rem 1rem;
            border-top-right-radius: 8px;
            border-bottom-right-radius: 8px;
            color: #6c757d;
        }
        
        .alert {
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
        }
        
        .alert-warning {
            background-color: rgba(255, 193, 7, 0.15);
            border-left: 4px solid #ffc107;
            color: #856404;
        }
        
        .movement-list {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        
        .movement-item {
            display: flex;
            align-items: center;
            padding: 1rem;
            border-bottom: 1px solid #e3e6f0;
            transition: background-color 0.3s;
        }
        
        .movement-item:hover {
            background-color: #f8f9fc;
        }
        
        .movement-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 1rem;
            flex-shrink: 0;
        }
        
        .movement-in {
            background-color: rgba(52, 168, 83, 0.2);
            color: #28a745;
        }
        
        .movement-out {
            background-color: rgba(231, 74, 59, 0.2);
            color: #e74c3c;
        }
        
        .movement-content {
            flex-grow: 1;
        }
        
        .movement-title {
            font-weight: 600;
            margin: 0 0 0.25rem 0;
            color: var(--dark);
        }
        
        .movement-details {
            display: flex;
            gap: 15px;
        }
        
        .movement-quantity, .movement-date {
            font-size: 0.85rem;
            color: #6e707e;
        }
        
        .stats-info {
            font-size: 0.85rem;
            color: #6c757d;
            display: flex;
            align-items: center;
            gap: 5px;
        }
        
        .view-all-btn {
            background: transparent;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 0.6rem 1.2rem;
            font-size: 0.9rem;
            color: var(--primary);
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            text-decoration: none;
        }
        
        .view-all-btn:hover {
            background: var(--primary);
            color: white;
            border-color: var(--primary);
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(67, 97, 238, 0.2);
        }
        
        .toast-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
        }
        
        @media (max-width: 768px) {
            .main-container {
                padding: 1rem;
            }
            
            .section-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }
            
            .card-header {
                flex-direction: column;
                gap: 1rem;
                align-items: flex-start;
            }
            
            .movement-details {
                flex-direction: column;
                gap: 5px;
            }
        }

        /* Estilos para o autocomplete */
        .form-control.is-valid {
            border-color: #28a745;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='8' height='8' viewBox='0 0 8 8'%3e%3cpath fill='%2328a745' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right calc(0.375em + 0.1875rem) center;
            background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
        }

        .form-control.is-invalid {
            border-color: #dc3545;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' fill='none' stroke='%23dc3545' viewBox='0 0 12 12'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right calc(0.375em + 0.1875rem) center;
            background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
        }

        /* Melhorar a aparência do datalist */
        datalist {
            max-height: 200px;
            overflow-y: auto;
        }

        /* Estilo para as opções do datalist (não é suportado por todos os navegadores) */
        datalist option {
            padding: 8px;
            cursor: pointer;
        }
    </style>
</head>
<body class="flex">
    <%- include('./partials/header'); %>
    
    <!-- Conteúdo Principal -->
    <main class="flex-1 overflow-auto bg-gray-50 min-h-screen">
        <div class="main-container">
            <!-- Header da Página -->
            <div class="section-header">
                <h1 class="section-title">
                    <i class="fas fa-sign-out-alt text-danger mr-2"></i>
                    Saída de Reagentes
                </h1>
                
            </div>
            
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
               <!-- Formulário de Saída -->
                <div>
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">
                                <i class="fas fa-sign-out-alt text-danger"></i>
                                Registrar Saída de Reagente
                            </h2>
                        </div>
                        <div class="p-6">
                            <form id="output-form">
                                <div class="mb-4">
                                    <label for="reagent" class="form-label required-field">Reagente</label>
                                    <input type="text" class="form-control" id="reagent" name="reagent" required 
                                           placeholder="Digite o nome do reagente..." list="reagents-list"
                                           autocomplete="off">
                                    <datalist id="reagents-list">
                                        <% produtos.forEach(produto => { %>
                                            <option value="<%= produto.nome %>" 
                                                    data-id="<%= produto.id_produto %>"
                                                    data-unit="<%= produto.unidade_medida %>"
                                                    data-stock="<%= produto.quantidade %>">
                                                <%= produto.nome %> - Estoque: <%= formatarNumero(produto.quantidade) %> <%= produto.unidade_medida %>
                                            </option>
                                        <% }); %>
                                    </datalist>
                                    <small class="form-text text-muted" id="stock-info">
                                        Comece a digitar o nome do reagente e selecione da lista
                                    </small>
                                    <input type="hidden" id="reagent-id" name="reagent-id">
                                </div>
                                
                                <div class="mb-4">
                                    <label for="quantity" class="form-label required-field">Quantidade</label>
                                    <div class="input-group">
                                        <input type="number" class="form-control" id="quantity" name="quantity" min="0.1" step="0.1" required placeholder="Ex: 2.5">
                                        <span class="input-group-text" id="unit-measure">unidade</span>
                                    </div>
                                    <small class="form-text text-muted" id="quantity-help">
                                        Digite a quantidade a ser retirada
                                    </small>
                                </div>
                                
                                <div class="mb-4">
                                    <label for="responsible" class="form-label required-field">Responsável</label>
                                    <input type="text" class="form-control" id="responsible" name="responsible" required 
                                        placeholder="Digite o nome do responsável">
                                </div>
                                
                                <div class="mb-4">
                                    <label for="project" class="form-label">Projeto/Experimento</label>
                                    <input type="text" class="form-control" id="project" name="project" 
                                        placeholder="Digite o projeto ou experimento">
                                </div>
                                
                                <div class="mb-4">
                                    <label for="notes" class="form-label">Observações</label>
                                    <textarea class="form-control" id="notes" name="notes" rows="3" 
                                            placeholder="Observações adicionais..."></textarea>
                                </div>
                                
                                <div class="d-grid">
                                    <button type="submit" class="danger-btn py-3">
                                        <i class="fas fa-check-circle me-2"></i>Registrar Saída
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
                
                <!-- Últimas Movimentações e Estatísticas -->
                <div>
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">
                                <i class="fas fa-exchange-alt"></i>
                                Últimas Movimentações
                            </h2>
                            <button class="view-all-btn" id="view-all-movements">
                                <i class="fas fa-list"></i> Ver todas
                            </button>
                        </div>
                        
                        <ul class="movement-list" id="movements-list">
                            <!-- As movimentações serão carregadas via JavaScript -->
                        </ul>
                        
                        <div class="card-footer p-4 bg-gray-50 border-t">
                            <span class="stats-info">
                                <i class="fas fa-history"></i>
                                <span id="last-update">Atualizado há 5 minutos</span>
                            </span>
                        </div>
                    </div>
                    
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">
                                <i class="fas fa-chart-bar text-success"></i>
                                Estatísticas de Saída
                            </h2>
                        </div>
                        <div class="p-6">
                            <div class="grid grid-cols-3 text-center mb-4">
                                <div class="border-r">
                                    <h4 class="text-danger text-2xl font-bold" id="today-outputs"></h4>
                                    <p class="text-muted mb-0 text-sm">Saídas hoje</p>
                                </div>
                                <div class="border-r">
                                    <h4 class=" text-2xl font-bold" id="week-outputs"></h4>
                                    <p class="text-muted mb-0 text-sm">Saídas semana</p>
                                </div>
                                <div>
                                    <h4 class="text-success text-2xl font-bold" id="month-outputs"></h4>
                                    <p class="text-muted mb-0 text-sm">Saídas mês</p>
                                </div>
                            </div>
                            
                            <div class="mt-4">
                                <h6 class="font-semibold mb-3"></h6>
                                <div id="reagents-stats">
                                    <!-- As estatísticas serão carregadas via JavaScript -->
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Informações Importantes (Agora abaixo dos cards de movimentações e estatísticas) -->
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">
                                <i class="fas fa-info-circle "></i>
                                Informações Importantes
                            </h2>
                        </div>
                        <div class="p-6">
                            <div class="alert alert-warning">
                                <h6 class="font-semibold"><i class="fas fa-exclamation-triangle me-2"></i>Antes de registrar a saída:</h6>
                                <ul class="mb-0 mt-2 ps-4">
                                    <li>Verifique o estoque disponível</li>
                                    <li>Confirme a identificação do reagente</li>
                                    <li>Registre qualquer observação relevante</li>
                                </ul>
                            </div>
                            
                            <div class="flex items-center mt-4">
                                <div class="flex-shrink-0 bg-primary bg-opacity-10 p-3 rounded">
                                    <i class="fas fa-database  fa-lg"></i>
                                </div>
                                <div class="flex-grow-1 ms-3">
                                    <h6 class="font-semibold mb-0">Estoque Total</h6>
                                    <p class="text-muted mb-0" id="total-items">184 itens em inventário</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>
    <!-- Container para toasts (notificações) -->
    <div class="toast-container"></div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
   <script>

// Variável para armazenar os produtos
let produtosData = [];

// Carregar dados dos produtos
function carregarProdutos() {
    produtosData = [
        <% produtos.forEach(produto => { %>
        {
            id: <%= produto.id_produto %>,
            nome: '<%= produto.nome %>',
            unidade: '<%= produto.unidade_medida %>',
            estoque: <%= produto.quantidade %>,
            tipo: '<%= produto.tipo %>'
        },
        <% }); %>
    ];
    console.log(`📦 ${produtosData.length} produtos carregados`);
}

// Buscar produto pelo nome
function buscarProdutoPorNome(nome) {
    return produtosData.find(produto => 
        produto.nome.toLowerCase() === nome.toLowerCase()
    );
}

// Função para formatar números no JavaScript
function formatarNumeroJS(num) {
    if (num === null || num === undefined || num === '') return '0,0';
    const numero = parseFloat(num);
    if (isNaN(numero)) return '0,0';
    return numero.toFixed(1).replace('.', ',');
}

// Função para exibir notificações no novo estilo
function showToast(message, type = 'success') {
    const notification = document.createElement('div');
    
    // Mapear tipos para ícones
    let icon = 'info';
    if (type === 'success') icon = 'check';
    if (type === 'danger') icon = 'exclamation-triangle';
    if (type === 'warning') icon = 'exclamation-circle';
    
    notification.className = `notification ${type}`;
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 1rem 1.5rem;
        border-radius: 8px;
        color: white;
        font-weight: 500;
        z-index: 9999;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        animation: slideIn 0.3s ease-out;
        max-width: 400px;
        background: ${type === 'success' ? '#28a745' : 
                     type === 'danger' ? '#dc3545' : 
                     type === 'warning' ? '#ffc107' : '#17a2b8'};
    `;
    
    notification.innerHTML = `
        <div style="display: flex; align-items: center; gap: 0.5rem;">
            <i class="fas fa-${icon}" style="font-size: 1.1rem;"></i>
            <span>${message}</span>
        </div>
    `;

    document.body.appendChild(notification);

    // Adicionar animação de entrada
    const style = document.createElement('style');
    style.textContent = `
        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }
        @keyframes slideOut {
            from {
                transform: translateX(0);
                opacity: 1;
            }
            to {
                transform: translateX(100%);
                opacity: 0;
            }
        }
    `;
    document.head.appendChild(style);

    setTimeout(() => {
        notification.style.animation = 'slideOut 0.3s ease-in forwards';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
            if (style.parentNode) {
                style.parentNode.removeChild(style);
            }
        }, 300);
    }, 4000);
}


// Atualizar informações quando o usuário digitar ou selecionar um reagente
function atualizarInformacoesProduto() {
    const reagentInput = document.getElementById('reagent');
    const unitMeasure = document.getElementById('unit-measure');
    const stockInfo = document.getElementById('stock-info');
    const quantityInput = document.getElementById('quantity');
    const reagentIdInput = document.getElementById('reagent-id');
    
    const produto = buscarProdutoPorNome(reagentInput.value);
    
    if (produto) {
        // Produto encontrado
        unitMeasure.textContent = produto.unidade;
        stockInfo.textContent = `Estoque disponível: ${formatarNumeroJS(produto.estoque)} ${produto.unidade}`;
        stockInfo.className = 'form-text ' + (produto.estoque <= 5 ? 'text-danger fw-bold' : 'text-muted');
        
        // Atualizar o placeholder do input de quantidade
        quantityInput.placeholder = `Ex: 1.0 (máx: ${formatarNumeroJS(produto.estoque)})`;
        quantityInput.max = produto.estoque;
        
        // Preencher o campo hidden com o ID do produto
        reagentIdInput.value = produto.id;
        
        // Adicionar classe de validação visual
        reagentInput.classList.add('is-valid');
        reagentInput.classList.remove('is-invalid');
    } else {
        // Produto não encontrado ou campo vazio
        unitMeasure.textContent = 'unidade';
        stockInfo.textContent = reagentInput.value ? 'Reagente não encontrado' : 'Digite o nome do reagente';
        stockInfo.className = 'form-text ' + (reagentInput.value ? 'text-danger' : 'text-muted');
        quantityInput.placeholder = 'Ex: 1.0';
        quantityInput.max = '';
        reagentIdInput.value = '';
        
        // Adicionar classe de erro visual se houver texto mas não encontrado
        if (reagentInput.value) {
            reagentInput.classList.add('is-invalid');
            reagentInput.classList.remove('is-valid');
        } else {
            reagentInput.classList.remove('is-valid', 'is-invalid');
        }
    }
}

// Função para carregar as movimentações de SAÍDA (4 últimas)
async function loadMovements() {
    try {
        console.log('🔄 Carregando últimas 4 saídas...');
        
        const response = await fetch('/api/output-movements');
        const movements = await response.json();
        
        const movementsList = document.getElementById('movements-list');
        if (!movementsList) {
            console.log('Elemento movements-list não encontrado');
            return;
        }
        
        movementsList.innerHTML = '';
        
        console.log('Últimas saídas recebidas:', movements);
        
        if (!movements || movements.length === 0) {
            movementsList.innerHTML = `
                <li class="movement-item text-center text-muted py-4">
                    <i class="fas fa-inbox fa-2x mb-2"></i>
                    <p>Nenhuma saída registrada</p>
                    <small class="text-muted">As saídas aparecerão aqui quando forem registradas</small>
                </li>
            `;
            return;
        }
        
        movements.forEach(movement => {
            const movementItem = document.createElement('li');
            movementItem.className = 'movement-item';
            
            const date = new Date(movement.date);
            const formattedDate = date.toLocaleDateString('pt-BR') + ' ' + date.toLocaleTimeString('pt-BR', {hour: '2-digit', minute: '2-digit'});
            
            movementItem.innerHTML = `
                <div class="movement-icon movement-out">
                    <i class="fas fa-arrow-up"></i>
                </div>
                <div class="movement-content">
                    <p class="movement-title">Saída - ${movement.reagent}</p>
                    <div class="movement-details">
                        <span class="movement-quantity"><strong>${formatarNumeroJS(movement.quantity)} ${movement.unit}</strong></span>
                        <span class="movement-date">${formattedDate}</span>
                        <span class="movement-responsible">por ${movement.responsible}</span>
                    </div>
                    ${movement.project ? `<small class="text-muted">Projeto: ${movement.project}</small>` : ''}
                </div>
            `;
            
            movementsList.appendChild(movementItem);
        });
        
        // Atualizar o timestamp da última atualização
        const lastUpdateElement = document.getElementById('last-update');
        if (lastUpdateElement) {
            lastUpdateElement.textContent = `Atualizado às ${new Date().toLocaleTimeString('pt-BR', {hour: '2-digit', minute: '2-digit'})}`;
        }
        
    } catch (error) {
        console.error('Erro ao carregar saídas:', error);
        const movementsList = document.getElementById('movements-list');
        if (movementsList) {
            movementsList.innerHTML = `
                <li class="movement-item text-center text-danger py-4">
                    <i class="fas fa-exclamation-triangle fa-2x mb-2"></i>
                    <p>Erro ao carregar saídas</p>
                    <small class="text-muted">${error.message}</small>
                </li>
            `;
        }
    }
}

// Função para carregar estatísticas
async function loadStatistics() {
    try {
        const response = await fetch('/api/statistics');
        const stats = await response.json();
        
        console.log('Estatísticas carregadas:', stats);
        
        // Atualizar os contadores apenas se os elementos existirem
        const todayOutputsElement = document.getElementById('today-outputs');
        const weekOutputsElement = document.getElementById('week-outputs');
        const monthOutputsElement = document.getElementById('month-outputs');
        const totalItemsElement = document.getElementById('total-items');
        const reagentsStatsElement = document.getElementById('reagents-stats');
        
        if (todayOutputsElement) {
            todayOutputsElement.textContent = stats.todayOutputs || 0;
        }
        
        if (weekOutputsElement) {
            weekOutputsElement.textContent = stats.weekOutputs || 0;
        }
        
        if (monthOutputsElement) {
            monthOutputsElement.textContent = stats.monthOutputs || 0;
        }
        
        if (totalItemsElement) {
            totalItemsElement.textContent = `${stats.totalItems || 0} itens em inventário`;
        }
        
        // Atualizar as estatísticas de reagentes apenas se o elemento existir
        if (reagentsStatsElement) {
            reagentsStatsElement.innerHTML = '';
            
            if (!stats.mostUsedReagents || stats.mostUsedReagents.length === 0) {
                reagentsStatsElement.innerHTML = '<p class="text-muted text-center">Nenhum dado disponível</p>';
                return;
            }
            
            // Aqui você pode adicionar a lógica para exibir os reagentes mais usados
            // se necessário no futuro
        }
    } catch (error) {
        console.error('Erro ao carregar estatísticas:', error);
        
        // Apenas atualizar elementos que existem
        const todayOutputsElement = document.getElementById('today-outputs');
        const weekOutputsElement = document.getElementById('week-outputs');
        const monthOutputsElement = document.getElementById('month-outputs');
        const totalItemsElement = document.getElementById('total-items');
        
        if (todayOutputsElement) todayOutputsElement.textContent = '0';
        if (weekOutputsElement) weekOutputsElement.textContent = '0';
        if (monthOutputsElement) monthOutputsElement.textContent = '0';
        if (totalItemsElement) totalItemsElement.textContent = '0 itens em inventário';
    }
}

// Envio do formulário de saída
function configurarEnvioFormulario() {
    const form = document.getElementById('output-form');
    if (!form) {
        console.log('Formulário de saída não encontrado');
        return;
    }

    form.addEventListener('submit', async function(event) {
        event.preventDefault();
        
        const submitBtn = this.querySelector('button[type="submit"]');
        const originalText = submitBtn.innerHTML;
        const reagentInput = document.getElementById('reagent');
        const reagentIdInput = document.getElementById('reagent-id');
        
        // Validar se o reagente foi encontrado
        if (!reagentIdInput.value) {
            showToast('❌ Por favor, selecione um reagente válido da lista', 'danger');
            reagentInput.focus();
            return;
        }
        
        // Validar quantidade
        const quantityInput = document.getElementById('quantity');
        const quantity = parseFloat(quantityInput.value);
        if (!quantity || quantity <= 0) {
            showToast('❌ Por favor, informe uma quantidade válida', 'danger');
            quantityInput.focus();
            return;
        }
        
        // Mostrar loading
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Registrando...';
        submitBtn.disabled = true;
        
        const formData = new FormData(this);
        const data = {
            reagent: reagentIdInput.value, // Usar o ID do produto
            quantity: formData.get('quantity'),
            responsible: formData.get('responsible'),
            project: formData.get('project'),
            notes: formData.get('notes')
        };
        
        console.log('Enviando dados:', data);
        
        try {
            const response = await fetch('/api/output', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });
            
            const result = await response.json();
            console.log('Resposta do servidor:', result);
            
            if (result.success) {
                const reagentName = document.getElementById('reagent').value;
                const quantity = document.getElementById('quantity').value;
                const unit = document.getElementById('unit-measure').textContent;
                
                showToast(`Saída de ${quantity} ${unit} de ${reagentName} registrada com sucesso! Estoque atualizado.`, 'success');
                this.reset();
                document.getElementById('reagent-id').value = '';
                
                // Limpar validação visual do campo de reagente
                reagentInput.classList.remove('is-valid', 'is-invalid');
                
                // Recarregar as movimentações e estatísticas
                await loadMovements();
                await loadStatistics();
                
                // Recarregar a página para atualizar a lista de produtos
                setTimeout(() => {
                    window.location.reload();
                }, 2000);
                
            } else {
                showToast(result.message, 'danger');
            }
        } catch (error) {
            console.error('Erro ao registrar saída:', error);
            showToast('Erro de conexão. Tente novamente.', 'danger');
        } finally {
            // Restaurar botão
            submitBtn.innerHTML = originalText;
            submitBtn.disabled = false;
        }
    });
}

// Configurar event listeners quando o DOM estiver carregado
document.addEventListener('DOMContentLoaded', function() {
    console.log('Página carregada, inicializando scripts...');
    
    // Carregar produtos
    carregarProdutos();
    
    // Configurar eventos do campo de reagente
    const reagentInput = document.getElementById('reagent');
    if (reagentInput) {
        reagentInput.addEventListener('input', atualizarInformacoesProduto);
        reagentInput.addEventListener('change', atualizarInformacoesProduto);
    }
    
    // Configurar envio do formulário
    configurarEnvioFormulario();
    
    // Configurar botão para ver todas as movimentações
    const viewAllBtn = document.getElementById('view-all-movements');
    if (viewAllBtn) {
        viewAllBtn.addEventListener('click', function() {
            window.location.href = '/movimentacoes';
        });
    }
    
    // Carregar dados iniciais
    loadMovements();
    loadStatistics();
    
    console.log('Scripts inicializados com sucesso');
});
</script>
</body>
</html>